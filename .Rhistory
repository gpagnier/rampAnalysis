}
d2=rbind(d2,dsub)
}
head(dsub)
#This is a column for highest gamble shown (used to calculate RPE2 and RPE3)
d$gambleMaxAmt=NULL
for (i in 1:length(d$response)){
if(d$oddsCond[i]=='lowp'){
d$gambleAmt[i]=(d$standardGamble[i]*1.5)
} else if(d$oddsCond[i]=='midp'){
d$gambleAmt[i]=(d$standardGamble[i]*2)
}else if(d$oddsCond[i]=='highp'){
d$gambleAmt[i]=(d$standardGamble[i]*3)
} else {
d$gambleAmt[i]=d$standardGamble[i]
}
}
d0<-read.csv(file="//files.brown.edu/Home/gpagnier/Documents/GitHub/rampAnalysis/Totalrampv02.csv",sep=",")
#Cleaning data
bonusAmountsTemp=data.frame(matrix(NA, ncol = 2, nrow =1))
bonusAmounts=bonusAmountsTemp
for (i in 1:length(d0$BonusAmount)){
if(!is.na(d0[i,2])){
bonusAmountsTemp[1,1]=as.integer(d0[i,"BonusAmount"])
bonusAmountsTemp[1,2]=as.character(d0[i,"uniqueid"])
bonusAmounts=rbind(bonusAmounts,bonusAmountsTemp)
}
}
bonusAmounts=bonusAmounts[-1,]
colnames(bonusAmounts)[1]<-"Amount"
colnames(bonusAmounts)[2]<-"ID"
bonusAmounts<-unique(bonusAmounts)
bonusAmounts
#Warning! CSV needs to be in exact column order:
#"trialid" #"expTime" "gambleDelay" "gambleRT" "outcomeRT" "response" "standardGamble" "trialNumber" "uniqueid"
#Need to replace uniqueid with numbers and clean out columns that aren't useful
d<-d0[,c("Trialid","expTime","gambleDelay","gambleRT","outcomeRT","response","standardGamble","trialNumber","uniqueid")]
d<-subset(d,!grepl("debug",as.character(d$uniqueid)))
d<-subset(d,d$response!="")
#Adding col uniqueID uniqueid with numbers
d$uniqueID=NA
seed=201
d[1,"uniqueID"]<-seed
for (i in 2:nrow(d)){
if(d[i,"uniqueid"]==d[i-1,"uniqueid"]){
d[i,"uniqueID"]=d[i-1,"uniqueID"]
}
else if (d[i,"uniqueid"]!=d[i-1,"uniqueid"]){
d[i,"uniqueID"]=(d[i-1,"uniqueID"]+1)
}
}
unique(d$uniqueID)
d$uniqueid=d$uniqueID
d$uniqueID=NULL
#############################################################################################################################
#Now we have a dataframe we can work with
#Replace any empty cell with NA
#Colnames should now be:
#"trialid" #"expTime" "gambleDelay" "gambleRT" "outcomeRT" "response" "standardGamble" "trialNumber" "uniqueid"
d[d==""] <- NA
d$gambleDelay<-d$gambleDelay/1000
d$binsTime=0;
#Clearing pictures
graphics.off()
##Some basic behavioral metrics and filtering participants and adding gamble delay
#Intitial filtering of participants
removeIds=c()
for(i in removeIds){
d<-d[!(d$uniqueid==i),]
}
unique(d$uniqueid)
#Where did gambles interrupt
hist(d$gambleDelay,breaks=50,xlim=c(0,8),main="Where gambles interrupted trials. All trials",xlab="seconds into trial gamble appeared",col='black')
#How many points do you want on the gambleDelay?
d$binsTme=NULL
bins=9
ninbins=round((length(d$Trialid)/bins))
#This creates a list with what should be in the binTimeCalc
delayValues=split(sort(d$gambleDelay[d$gambleDelay!=0]), ceiling(seq_along(d$gambleDelay[d$gambleDelay!=0])/ninbins))
#This is to manually hardcode the NUMBER of blocks you're using - can not exceed number of bins
a1head<-unlist(lapply(delayValues[1],head,1),use.names=FALSE)
a1tail<-unlist(lapply(delayValues[1],tail,1),use.names=FALSE)
a2head<-unlist(lapply(delayValues[2],head,1),use.names=FALSE)
a2tail<-unlist(lapply(delayValues[2],tail,1),use.names=FALSE)
a3head<-unlist(lapply(delayValues[3],head,1),use.names=FALSE)
a3tail<-unlist(lapply(delayValues[3],tail,1),use.names=FALSE)
a4head<-unlist(lapply(delayValues[4],head,1),use.names=FALSE)
a4tail<-unlist(lapply(delayValues[4],tail,1),use.names=FALSE)
a5head<-unlist(lapply(delayValues[5],head,1),use.names=FALSE)
a5tail<-unlist(lapply(delayValues[5],tail,1),use.names=FALSE)
a6head<-unlist(lapply(delayValues[6],head,1),use.names=FALSE)
a6tail<-unlist(lapply(delayValues[6],tail,1),use.names=FALSE)
a7head<-unlist(lapply(delayValues[7],head,1),use.names=FALSE)
a7tail<-unlist(lapply(delayValues[7],tail,1),use.names=FALSE)
a8head<-unlist(lapply(delayValues[8],head,1),use.names=FALSE)
a8tail<-unlist(lapply(delayValues[8],tail,1),use.names=FALSE)
a9head<-unlist(lapply(delayValues[9],head,1),use.names=FALSE)
a9tail<-unlist(lapply(delayValues[9],tail,1),use.names=FALSE)
a10head<-unlist(lapply(delayValues[10],head,1),use.names=FALSE)
a10tail<-unlist(lapply(delayValues[10],tail,1),use.names=FALSE)
#This is the function that creates gambleBins
binTimeCalc<-function(d,row){
if(d[row,3]==0)
{return(0)}
else if (d[row,3]>0&d[row,3]<=a1tail)
{return(mean(c(a1head,a1tail)))}
else if (d[row,3]>=a2head&d[row,3]<=a2tail)
{return(mean(c(a2head,a2tail)))}
else if (d[row,3]>=a3head&d[row,3]<=a3tail)
{return(mean(c(a3head,a3tail)))}
else if (d[row,3]>=a4head&d[row,3]<=a4tail)
{return(mean(c(a4head,a4tail)))}
else if (d[row,3]>=a5head&d[row,3]<=a5tail)
{return(mean(c(a5head,a5tail)))}
else if (d[row,3]>=a6head&d[row,3]<=a6tail)
{return(mean(c(a6head,a6tail)))}
else if (d[row,3]>=a7head&d[row,3]<=a7tail)
{return(mean(c(a7head,a7tail)))}
else if (d[row,3]>=a8head&d[row,3]<=a8tail)
{return(mean(c(a8head,a8tail)))}
else if (d[row,3]>=a9head&d[row,3]<=max(d$gambleDelay))
{return(mean(c(a9head,a9tail)))}
else
{return(999)}
}
#Actually running the functon
for(i in 1:nrow(d)){
d[i,'binsTime']=binTimeCalc(d,i)
}
#Creating new df to see how many ended up in each bin/ this is sanity check
dbins<-d %>%
group_by(binsTime) %>%
summarise(Number=length(response))
dbins
#Remove/coalesce any rows with bins if the numbers are too far apart from one another
#Right now this takes the last one and adds it to the last 'bin'
for(i in 1:nrow(d)){
if(d[i,"binsTime"]==mean(c(a8head,a8tail))){
d[i,"binsTime"]=mean(c(a7head,a7tail))
i
}
};
dbins<-d %>%
group_by(binsTime) %>%
summarise(Number=length(response))
dbins
###################################################################################
#Adding different factors
#Adding which condition trial was in
#For new data set
d$magCond<-NULL
magCondCalc<-function(d,row){
if(d[row,'standardGamble']==1|d[row,'standardGamble']==2){
return("low")
} else if (d[row,'standardGamble']==3|d[row,'standardGamble']==4){
return("mid")
} else if (d[row,'standardGamble']==5|d[row,'standardGamble']==6){
return("high")
} else{
return("null")
}
}
for(i in 1:nrow(d)){
d[i,'magCond']=magCondCalc(d,i)
}
d$oddsCond<-NULL
oddsCondCalc<-function(d,row){
if(d[row,'Trialid']==21|d[row,'Trialid']==22|d[row,'Trialid']==23|d[row,'Trialid']==24|d[row,'Trialid']==25|d[row,'Trialid']==26){
return("lowp")
} else if (d[row,'Trialid']==1|d[row,'Trialid']==2|d[row,'Trialid']==3|d[row,'Trialid']==4|d[row,'Trialid']==5|d[row,'Trialid']==6){
return("midp")
} else if (d[row,'Trialid']==31|d[row,'Trialid']==32|d[row,'Trialid']==33|d[row,'Trialid']==34|d[row,'Trialid']==35|d[row,'Trialid']==36){
return("highp")
} else{
return("catch")
}
}
for(i in 1:nrow(d)){
d[i,'oddsCond']=oddsCondCalc(d,i)
}
#Adding another column 1 if they gambled, 0 if they didn't
#This will be outcome variable in logistic regression
d$gambled=NULL
for (i in 1:length(d$response)){
if(d$response[i]=='gamble'){
d$gambled[i]=1
} else {
d$gambled[i]=0
}
}
#This is a column for highest gamble shown (used to calculate RPE2 and RPE3)
d$gambleMaxAmt=NULL
for (i in 1:length(d$response)){
if(d$oddsCond[i]=='lowp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*1.5)
} else if(d$oddsCond[i]=='midp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*2)
}else if(d$oddsCond[i]=='highp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*3)
} else {
d$gambleMaxAmt[i]=d$standardGamble[i]
}
}
#Adding prediction errors:
#Adding prediction errors as possible variable
d2=d[0,]
#rpe 1 2 and 3
d$rpe1=NULL
d$rpe2=NULL
d$rpe3=NULL
Participants<-unique(d$uniqueid)
#Adding RPE as a factor AND normalized z score
#rpe1 is the sure thing of trial t- standard gamble of t-1
#rpe2 is the sure thing of t - the average of whatever was chosen in t-1
#rpe3 is the sure thing of t - whatever was chosen in t-1 but the highest gamble option instead of average
for (i in Participants){
dsub<-filter(d,uniqueid==i)
dsub[1,"rpe1"]=dsub[1,"standardGamble"]
dsub[1,"rpe2"]=dsub[1,"standardGamble"]
dsub[1,"rpe3"]=dsub[1,"standardGamble"]
#This is adding RPE
for (row in 2:length(dsub$Trialid)){
#This is essentially calculating the difference between potential reward on trial
#t - reward on trial t-1
dsub[row,"rpe1"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
#This is rpe2
if(dsub[row,"gambled"]){
dsub[row,"rpe2"]=(dsub[row,"standardGamble"]-(dsub[(row-1),"gambleMaxAmt"]/2))
} else{
dsub[row,"rpe2"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
}
}
#This is rpe3
for (row in 2:length(dsub$Trialid)){
if(dsub[row,"gambled"]){
dsub[row,"rpe3"]=(dsub[row,"standardGamble"]-(dsub[(row-1),"gambleMaxAmt"]))
} else{
dsub[row,"rpe3"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
}
}
d2=rbind(d2,dsub)
}
d=d2
head(d)
#Normalized RT log(1/RT)
d$NgambleRT=0
d$NoutcomeRT=0
#Dividing gambleRT by (1/RT) on new column
for(i in 1:length(d$response)){
if(d[i,"gambleRT"]!=0){
d[i,"NgambleRT"]=(1/d[i,"gambleRT"])
}
}
#Dividing OutcomeRT by 1/RT
for(i in 1:length(d$response)){
if(d[i,"outcomeRT"]!=0){
d[i,"NoutcomeRT"]=(1/d[i,"outcomeRT"])
}
}
head(d)
nParticipants<- length(unique(d$uniqueid))
nParticipants
#Check for catch trials
#75 should gamble; 86 should success/fail; 2 catch trials?
#Check for catch trials
dcatch<-filter(d,Trialid==75|Trialid==86)[,c(1,6,9)]
dcatch[order(dcatch$Trialid),]
dcatchGamble<-dcatch[dcatch$Trialid==75,]
failCatchId<-dcatchGamble[dcatchGamble$response!='gamble',]$uniqueid
#Check for catch trials
#75 should gamble; 86 should success/fail; 2 catch trials?
#Check for catch trials
dcatch<-filter(d,Trialid==75|Trialid==86)[,c(1,6,9)]
#dcatch[order(dcatch$Trialid),]
dcatchGamble<-dcatch[dcatch$Trialid==75,]
failCatchId<-dcatchGamble[dcatchGamble$response!='gamble',]$uniqueid
dcatchSuccess<-dcatch[dcatch$Trialid==86,]
failCatchId<-c(failCatchId,dcatchSuccess[dcatchSuccess$response=='gamble',]$uniqueid)
failCatchId<-unique(failCatchId)
catchSucc<-setdiff(Participants,failCatchId)
failCatchId
catchSucc
failCatchId<-unique(failCatchId)
catchSuccessId<-setdiff(Participants,failCatchId)
failCatchId<-unique(c(failCatchId,dcatchSuccess[dcatchSuccess$response=='gamble',]$uniqueid))
failCatchId
###Behavioral analyses
##Reaction time
#Whenever they gambled
gambleRTs<-d$gambleRT[d$gambleRT!=0]
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70)
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70,col='black')
#Whenever they claimed 'boring' reward
outcomeRTs<-d$outcomeRT[d$outcomeRT!=0]
hist(outcomeRTs,main=c("Aggregated outcome RTs; number of trials:",length(outcomeRTs)),breaks=70)
#Printing experiment times in minutes CONFIRM PSITURK TRACKS IN MILLISECONDS
expTimes<-((unique(d$expTime,na.rm=TRUE)/1000)/60)
histogram(expTimes,main="Experiment Time (in minutes)",breaks=50,xlim=c(0,60))
hist(expTimes,main="Experiment Time (in minutes)",breaks=50,xlim=c(0,60))
hist(expTimes,main="Experiment Time (in minutes)",breaks=50,xlim=c(0,90))
hist(expTimes,main="Experiment Time (in minutes)",breaks=50,xlim=c(0,120))
#Removing participants who gambled too much/not enough
dgamble0<-filter(d,gambleDelay!=0)
dBehavioralTotal<-dgamble0 %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
head(dBehavioralTotal)
#head(dBehavioralTotal)
#Overall preference for gambling
hist(dBehavioralTotal$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall participant propensity(everyone) to gamble; n =",toString(sum(dBehavioralTotal$trials)),"trials;",nParticipants,"participants"),xlab="Percentage of time gambled")
#head(dBehavioralTotal)
#Overall preference for gambling
hist(dBehavioralTotal$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall participant propensity(everyone) to gamble; n =",toString(sum(dBehavioralTotal$trials)),"trials;",nParticipants,"participants"),xlab="Percentage of time gambled")
dlowG<-filter(dBehavioralTotal,percentageGambled<6)
noGamblers<-dlowG$uniqueid
dhighg<-filter(dBehavioralTotal,percentageGambled>95)
allGamblers<-dhighg$uniqueid
lowTrials<-filter(dBehavioralTotal,trials<50)$uniqueid
removeIds<-c(noGamblers,allGamblers,lowTrials)
#Removing any subjects from dataset if needed, using unique ids in vector removeIds
for(i in removeIds){
d<-d[!(d$uniqueid==i),]
}
#Now this is refined number of participants
nParticipants<- length(unique(d$uniqueid))
Participants<-unique(d$uniqueid)
nParticipants
#######################################################################################################
#Clearing pictures
graphics.off()
#Behavioral analyses
dgamble<-filter(d,gambleDelay!=0)
dBehavioral<-dgamble %>%
group_by(uniqueid) %>%
summarise(experimentTime=unique(expTime)[2],
trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
ist(dBehavioral$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall participant propensity to gamble; n =",toString(sum(dBehavioralTotal$trials)),"trials;",nParticipants,"participants"),xlab="Percentage of time gambled")
hist(dBehavioral$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall participant propensity to gamble; n =",toString(sum(dBehavioralTotal$trials)),"trials;",nParticipants,"participants"),xlab="Percentage of time gambled")
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70)
c("Numberof trials that they gambled on: ",length(gambleRTs))
hist(dBehavioral$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall participant propensity to gamble; n =",toString(sum(dBehavioralTotal$trials))," possibletrials;",nParticipants,"subj"),xlab="Percentage of time gambled")
hist(dBehavioral$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall propensity to gamble; n =",toString(sum(dBehavioralTotal$trials))," possible trials;",nParticipants,"subj"),xlab="Percentage of time gambled")
#Remaking behavioral histograms
#Whenever they gambled
gambleRTs<-d$gambleRT[d$gambleRT!=0]
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70)
dBehavioral
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$trials)),breaks=70))
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$trials)),breaks=70))
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$trials),breaks=70))
)
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$trials)),breaks=70))
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$trials))," trials",breaks=70))
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$trials))," trials"),breaks=70))
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$trials))," trials"),breaks=70)
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$trials)),"gambled"),breaks=70)
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$trials)),"trials gambled"),breaks=70)
c("Numberof trials that they gambled on: ",toString(sum(dBehavioral$gambleCount)))
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$gambleCounttrials)),"trials gambled"),breaks=70)
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$gambleCount)),"trials gambled"),breaks=70)
#Remaking behavioral histograms
#Whenever they gambled
gambleRTs<-d$gambleRT[d$gambleRT!=0]
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$gambleCount)),"trials gambled"),breaks=70)
c("Numberof trials that they gambled on: ",toString(sum(dBehavioral$gambleCount)))
head(d)
head(dBehavioral)
hist(outcomeRTs,main=paste("Aggregated outcome RTs; ",toString(sum(dBehavioral$didNotGamble)),"trials accepted sure thing"),breaks=70)
mean(dBehavioral$percentageGambled)
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$gambleCount)),"trials gambled"),breaks=70)
c("Numberof trials that they gambled on: ",toString(sum(dBehavioral$gambleCount)))
c("Number of trials that they accepted sur thing: ",length(outcomeRTs))
hist(outcomeRTs,main=paste("Aggregated outcome RTs; ",toString(sum(dBehavioral$didNotGamble)),"trials accepted sure thing"),breaks=70)
hist(outcomeRTs,main=paste("Aggregated outcome RTs; ",toString(length(outcomeRTs)),"trials accepted sure thing"),breaks=70)
#Number of trials per participant
dTrials<-d %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/ntrials*100))
dTrials
#dTrials
hist(dTrials$ntrials,breaks=50,xlim=c(0,120),ylim=c(0,30),main=paste("Number of trials per participant; ",nParticipants,"participants"),xlab="Number of Trials per participant")
#dTrials
hist(dTrials$ntrials,breaks=50,xlim=c(0,120),main=paste("Number of trials per participant; ",nParticipants,"participants"),xlab="Number of Trials per participant")
#Logistic regression models to predict gambled
#Need to figure out which one to use
mlog<-glm(gambled~rpe3+oddsCond,
data=dgamble,family="binomial");
summary(mlog)
mlog2<-glm(gambled~trialNumber+PredictionError+
gambleDelay+oddsCond+magCond+PredictionError,
data=dgamble,family="binomial");
summary(mlog2)
mlog2<-glm(gambled~trialNumber+rpe1+
gambleDelay+oddsCond+magCond+rpe2,
data=dgamble,family="binomial");
summary(mlog2)
##Total data
c("Number of trials that they gambled on: ",length(d$gambleRT[d$gambleRT!=0]))
c("Number of trials that they had the chance to gamble on: ",length(d$gambleDelay))
c("Number of trials that they had the chance to gamble on: ",length(d$gambleDelay[d$gambleDelay!=0]))
mean(dBehavioral$percentageGambled)
sd(dBehavioral$percentageGambled)
boxplot(dBehavioral$percentageGambled)
boxplot(dBehavioral$percentageGambled,ylim=c(0,100))
hist(dBehavioral$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall propensity to gamble; n =",toString(sum(dBehavioral$trials))," possible trials;",nParticipants,"subj"),xlab="Percentage of time gambled")
boxplot(dBehavioral$percentageGambled,ylim=c(0,100),)
boxplot(dBehavioral$percentageGambled,ylim=c(0,100),main="Distribution of gambling percentages across everyone")
boxplot(dBehavioral$percentageGambled,ylim=c(0,100),main="Distribution of gambling percentages across everyone",ylab="Percentage gambled (per participant)")
#Remaking behavioral histograms
#Whenever they gambled
gambleRTs<-d$gambleRT[d$gambleRT!=0]
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$gambleCount)),"trials gambled"),breaks=70)
c("Numberof trials that they gambled on: ",toString(sum(dBehavioral$gambleCount)))
#Whenever they claimed guaranteed reward
outcomeRTs<-d$outcomeRT[d$outcomeRT!=0]
hist(outcomeRTs,main=paste("Aggregated outcome RTs; ",toString(length(outcomeRTs)),"trials accepted sure thing"),breaks=70)
c("Number of trials that they accepted sur thing: ",length(outcomeRTs))
#Number of trials per participant
dTrials<-d %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/ntrials*100))
#dTrials
hist(dTrials$ntrials,breaks=50,xlim=c(0,120),main=paste("Number of trials per participant; ",nParticipants,"participants"),xlab="Number of Trials per participant")
#Logistic regression models to predict gambled
#Need to figure out which one to use
mlog<-glm(gambled~rpe3+oddsCond,
data=dgamble,family="binomial");
summary(mlog)
mlog2<-glm(gambled~trialNumber+rpe1+
gambleDelay+oddsCond+magCond+rpe2,
data=dgamble,family="binomial");
summary(mlog2)
##Total data
c("Number of trials that they gambled on: ",length(d$gambleRT[d$gambleRT!=0]))
c("Number of trials that they had the chance to gamble on: ",length(d$gambleDelay[d$gambleDelay!=0]))
View(dgamble)
c("Number of trials that they had the chance to gamble on: ",length(d$gambleDelay[d$gambleDelay!=0]))
c("Number of trials that they had the chance to gamble on: ",length(dgamble$response))
##Total data
c("Number of trials that they gambled on: ",length(dgamble$response[dgamble$response=='gamble']))
c("Number of trials that they had the chance to gamble on: ",length(dgamble$response))
#By GambleDelay
d2<-d %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100),
medianRT=median(setdiff(gambleRT,0)),
sdRT=sd(gambleRT))
d2$seconds<-d2$binsTime
d2=filter(d2,binsTime!=0)
d2
#Interesting plot of gambleDelay vs propensity to gamble. Add sds? May be meaningless..
plot(d2$seconds,d2$percentageGambled,xlim = c(0,8),ylim = c(0,100),
main=paste("Total group data; Gamble propensity; n =",toString(sum(d2$trials)),"trials;"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
#Plotting gamble RTs with sd
dRT<-filter(d,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=median(gambleRT),
sdRT=sd(gambleRT),
medianSpeed=median(ngambleRT),
sdSpeed=sd(ngambleRT))
dRT$seconds<-dRT$binsTime
head(dgamble)
#Plotting gamble RTs with sd
dRT<-filter(dgamble,response=='gamble') %>%
group_by(binsTime) %>%
summarise(medianRT=median(gambleRT),
sdRT=sd(gambleRT),
medianSpeed=median(ngambleRT),
sdSpeed=sd(ngambleRT))
#Plotting gamble RTs with sd
dRT<-filter(dgamble,response=='gamble') %>%
group_by(binsTime) %>%
summarise(medianRT=median(gambleRT),
sdRT=sd(gambleRT),
medianSpeed=median(NgambleRT),
sdSpeed=sd(NgambleRT))
dRT$seconds<-dRT$binsTime
dRT
#This is raw RT
plot(dRT$seconds,dRT$medianRT,xlim = c(0,8),ylim=c(600,800),main=paste("Group data; total data; median RT with sd; n =",toString(sum(d2$trials)),"trials;"),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
for(i in 1:length(dRT$seconds)){
arrows(as.numeric(dRT$seconds[i]),as.numeric(dRT[i,2]+(as.numeric(dRT[i,3]))),as.numeric(dRT$seconds[i]),as.numeric(dRT[i,2]-(as.numeric(dRT[i,3]))),length=0.05, angle=90, code=3)
}
#This is raw RT
plot(dRT$seconds,dRT$medianRT,xlim = c(0,8),ylim=c(500,900),main=paste("Group data; total data; median RT with sd; n =",toString(sum(d2$trials)),"trials;"),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
for(i in 1:length(dRT$seconds)){
arrows(as.numeric(dRT$seconds[i]),as.numeric(dRT[i,2]+(as.numeric(dRT[i,3]))),as.numeric(dRT$seconds[i]),as.numeric(dRT[i,2]-(as.numeric(dRT[i,3]))),length=0.05, angle=90, code=3)
}
#This is raw RT
plot(dRT$seconds,dRT$medianRT,xlim = c(0,8),ylim=c(400,900),main=paste("Group data; total data; median RT with sd; n =",toString(sum(d2$trials)),"trials;"),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
for(i in 1:length(dRT$seconds)){
arrows(as.numeric(dRT$seconds[i]),as.numeric(dRT[i,2]+(as.numeric(dRT[i,3]))),as.numeric(dRT$seconds[i]),as.numeric(dRT[i,2]-(as.numeric(dRT[i,3]))),length=0.05, angle=90, code=3)
}
