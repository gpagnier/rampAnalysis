run<-NULL
slopeDF<-NULL
plotRT=FALSE
plotGD=FALSE
#Participants is default (all participants)
#If you want to run sub groups, go to bottom of script
for(i in Participants){
print(i)
dsub<-d[d$uniqueid==i,]
dsubgambled<-filter(dsub,response=="gamble")
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
oddsN=rbind(oddsN,oddsNtemp)
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub[dsub$gambleDelay!=0,] %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=median(gambleRT),
sdRT=sd(gambleRT))
d4RT$seconds<-d4RT$binsTime
if (plotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
#This is top check for gamble ramp
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0),family="binomial")
#This is glm for RT by gamble Delay
mtempRT<-lm(d4RT$medianRT~d4RT$seconds)
#This checks to see if any participant is gamble ramping
if(summary(mlogtemp)$coefficients[8]<.1 & summary(mlogtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's susupiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<200){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.05 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mlogtemp)$coefficients[2])
run<-c(run,i)
}
slopeDF<-data.frame(cbind(run,rtSlopes,gambleSlopes))
a<-oddsN[order(oddsN$OddsGamblingScore),]
#oddsN is the median split of people who respond well to odds
oddsN<-as.integer(a$Participant[(length(a$Participant)/2):length(a$Participant)])
#Plot of gamble slopes vs. rtSlopes
#POSTER graph
#POSTER3
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='Individual Gamble slopes (% change/seconds)',ylab='Individual RT Slopes (ms/seconds)',pch=16,cex=0.8,main='All Participants; n=88',xlim=c(-.7,.7),ylim=c(-80,50),bty='7')
with(slopeDF, text(slopeDF$rtSlopes~slopeDF$gambleSlopes, labels = slopeDF$run,cex=.8), pos = 2)
m1<-lm(slopeDF$rtSlopes~slopeDF$gambleSlopes)
abline(m1)
cor(slopeDF$rtSlopes~slopeDF$gambleSlopes)
summary(m1)
#TO do make plot of gamble slopes histogram
#POSTER graph
#POSTER4
par(bty="7")
hist(slopeDF$gambleSlopes,xlab='Individual Gamble slopes (% change/seconds)',ylab='Frequency',pch=16,cex=0.8,main='All Participants; n=88',
breaks=50,xlim=c(-.7,.7),bty='7',col='black')
t.test(slopeDF$gambleSlopes)
#TO do make plot of RT slopes histogram
#POSTER graph
#POSTER5
hist(slopeDF$rtSlopes,xlab='Individual RT Slopes (ms/seconds)',ylab='Frequency',pch=16,cex=0.8,main='All Participants; n=88',breaks=50,xlim=c(-150,150),col='black')
t.test(slopeDF$rtSlopes)
summaryMagFilter=FALSE
summaryMagCond='high'
summaryOddsFilter=FALSE
summaryOddsCond='highp'
# d5<-dgamble[dgamble$uniqueid %in% oddsN,]
# d5<-dgamble[dgamble$uniqueid %in% highGamblers,]
d5<-dgamble[dgamble$uniqueid %in% failCatchId,]
#This filters summary d5 by odds/mag if specified above via T/F
if(summaryMagFilter){
d5<-filter(d5,magCond==summaryMagCond)
}
if(summaryOddsFilter){
d5<-filter(d5,oddsCond==summaryOddsCond)
}
c("Number of trials that they gambled on:",length(d5$gambleRT[d5$gambleRT!=0]))
c("Number of trials that they had the chance to gamble on:",length(d5$gambleDelay))
#By uniqueId
d5Behavioral<-d5 %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
#How much did each participant choose to gamble
#hist(d5Behavioral$percentageGambled,breaks=50,ylim=c(0,20),xlim=c(-5,100),main=paste("Propensity to gamble; n =",toString(sum(d5Behavioral$trials)),"possible trials;"),xlab="Percentage of time gambled")
#RTs histogram
#hist(setdiff(d5$gambleRT,0),xlim=c(0,1500),breaks=50,main=paste("RT; n =",toString(sum(d5Behavioral$gambleCount)),"gambled trials;"),xlab="Reaction time")
#By GambleDelay
d52<-d5 %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100),
medianRT=median(setdiff(gambleRT,0)),
sdRT=sd(gambleRT))
d52$seconds<-d52$binsTime
plot(d52$seconds,d52$percentageGambled,xlim = c(0,8),ylim = c(30,80),
main=paste("Gamble propensity; n =",toString(sum(d52$gambleCount)),"gambled trials;"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
#Plotting RTs with sd
d5pRT<-filter(d5,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=mean(gambleRT),
sdRT=sd(gambleRT))
d5pRT$seconds<-d5pRT$binsTime
plot(d5pRT$seconds,d5pRT$medianRT,xlim = c(0,8),ylim=c(400,900),main=paste("Group data; median RT with sd; n =",toString(sum(d52$gambleCount)),"trials;"),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
d5high<-filter(d5,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
d5low<-filter(d5,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter to get Odds score and mag score
d5behavioralHigh<-d5high %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d5behavioralLow<-d5low %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsScore<-mean(d5behavioralHigh$percentageGambled)-mean(d5behavioralLow$percentageGambled)
oddsScore
#Sig effect of gambleDelay on gambling?
summary(glm(gambled~gambleDelay,
data=filter(d5,gambleDelay!=0),family="binomial"))
#Sig effect of gambleDelay on RT when gambling?
d6<-filter(d5,response=='gamble')
summary(glm(gambleRT~gambleDelay,
data=d6))
#Overlaying RT histograms of d over d5 of sure thing and gamble
#d5 should be defined above
rtall<-filter(d,response=='success')
rtsub<-filter(d5,response=='success')
hist(rtall$outcomeRT,col=rgb(1,0,0,0.5), main='RTs when accepting sure thing', xlab='RT',breaks=40,xlim=c(0,1300))
abline(v=median(rtall$outcomeRT),col="red",lwd=2)
hist(rtsub$outcomeRT,col=rgb(0,0,1,0.5), add=T,breaks=40)
abline(v=median(rtsub$outcomeRT),col="blue",lwd=2)
t.test((1/rtall$outcomeRT),(1/rtsub$outcomeRT))
rtall<-filter(d,response=='gamble')
rtsub<-filter(d5,response=='gamble')
hist(rtall$gambleRT,col=rgb(1,0,0,0.5), main='RTs when gambling', xlab='RT',breaks=40,xlim=c(0,1300))
abline(v=median(rtall$gambleRT),col="red",lwd=2)
hist(rtsub$gambleRT,col=rgb(0,0,1,0.5), add=T,breaks=40)
abline(v=median(rtsub$gambleRT),col="blue",lwd=2)
t.test((1/rtall$gambleRT),(1/rtsub$gambleRT))
summaryMagFilter=FALSE
summaryMagCond='high'
summaryOddsFilter=FALSE
summaryOddsCond='highp'
#New way which is better
d5prime<-dgamble[dgamble$uniqueid %in% rtn,]
#New way which is better
d5prime<-dgamble[dgamble$uniqueid %in% rtn,]
#This filters summary d5prime by odds/mag if specified above via T/F
if(summaryMagFilter){
filter(d5prime,magCond==SummaryMagCond)
}
if(summaryOddsFilter){
filter(d5prime,oddsCond==SummaryOddsCond)
}
c("Number of trials that they gambled on:",length(d5prime$gambleRT[d5prime$gambleRT!=0]))
c("Number of trials that they had the chance to gamble on:",length(d5prime$gambleDelay))
#By uniqueId
d5primeBehavioral<-d5prime %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
#How much did each participant choose to gamble
hist(d5primeBehavioral$percentageGambled,breaks=50,ylim=c(0,20),xlim=c(-5,100),main=paste("Propensity to gamble; n =",toString(sum(d5primeBehavioral$trials)),"possible trials;"),xlab="Percentage of time gambled")
#RTs histogram
hist(setdiff(d5prime$gambleRT,0),xlim=c(0,1500),breaks=50,main=paste("RT; n =",toString(sum(d5primeBehavioral$gambleCount)),"gambled trials;"),xlab="Reaction time")
#By GambleDelay
d5prime2<-d5prime %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100),
medianRT=median(setdiff(gambleRT,0)),
sdRT=sd(gambleRT))
d5prime2$seconds<-d5prime2$binsTime
#Interesting plot of gambleDelay vs propensity to gamble. Add sds? May be meaningless..
plot(d5prime2$seconds,d5prime2$percentageGambled,xlim = c(0,8),ylim = c(0,100),
main=paste("Gamble propensity; n =",toString(sum(d5prime2$gambleCount))," gambled trials;"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
plot(d5prime2$seconds,d5prime2$percentageGambled,xlim = c(0,8),ylim = c(45,70),
main=paste("Gamble propensity; n =",toString(sum(d5prime2$gambleCount)),"gambled trials;",toString(length(unique(d5prime$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
#Plotting RTs with sd
d5primepRT<-filter(d5prime,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=mean(gambleRT),
sdRT=sd(gambleRT))
d5primepRT$seconds<-d5primepRT$binsTime
plot(d5primepRT$seconds,d5primepRT$medianRT,xlim = c(0,8),ylim=c(400,900),main=paste("Group data; median RT with sd; n =",toString(sum(d5prime2$gambleCount)),"trials;"),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
d5primehigh<-filter(d5prime,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
d5primelow<-filter(d5prime,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter to get Odds score and mag score
d5primebehavioralHigh<-d5primehigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d5primebehavioralLow<-d5primelow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsScore<-mean(d5primebehavioralHigh$percentageGambled)-mean(d5primebehavioralLow$percentageGambled)
oddsScore
#Sig effect of gambleDelay on gambling?
summary(glm(gambled~gambleDelay,
data=filter(d5prime,gambleDelay!=0),family="binomial"))
#Sig effect of gambleDelay on RT when gambling?
d6<-filter(d5prime,response=='gamble')
summary(glm(gambleRT~gambleDelay,
data=d6))
#Overlaying histograms of d5 and d5prime
#d5 should be defined above
#rtsub1 and rtsub should be identical, just used in different contextx
rtsub1<-filter(d5,response=='success')
rtsub2<-filter(d5prime,response=='success')
#This plots the two subgroups histograms against one another
hist(rtsub1$outcomeRT,col=rgb(1,0,0,0.5), main='RTs when accepting sure thing', xlab='RT',breaks=40,xlim=c(0,1300))
abline(v=median(rtsub1$outcomeRT),col="red",lwd=2)
hist(rtsub2$outcomeRT,col=rgb(0,0,1,0.5), add=T,breaks=40)
abline(v=median(rtsub2$outcomeRT),col="blue",lwd=2)
t.test((1/rtsub1$outcomeRT),(1/rtsub2$outcomeRT))
rtsub1<-filter(d5,response=='gamble')
rtsub2<-filter(d5prime,response=='gamble')
hist(rtall$gambleRT,col=rgb(1,0,0,0.5), main='RTs when gambling', xlab='RT',breaks=40,xlim=c(0,1300))
abline(v=median(rtall$gambleRT),col="red",lwd=2)
hist(rtsub2$gambleRT,col=rgb(0,0,1,0.5), add=T,breaks=40)
abline(v=median(rtsub2$gambleRT),col="blue",lwd=2)
t.test((1/rtsub1$gambleRT),(1/rtsub2$gambleRT))
#Looping through subgroups to get INDIVIDUAL graphs
subplotRT=FALSE
subplotGD=FALSE
soddsN=NULL
#Looping through subgroups to get INDIVIDUAL graphs
subplotRT=FALSE
subplotGD=TRUE
soddsN=NULL
oddsScoreKnob=FALSE
magScoreKnob=FALSE
smagN=NULL
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
subslope1DF<-NULL
gambleMeans<-NULL
#Want to look at subgroups of participants?
oddsFilter<-FALSE
subOddsCond<-'highp'
MagFilter<-FALSE
subMagCond<-'high'
#Subgroup 1
for(i in fail1){
print(i)
dsub<-filter(d,uniqueid==i)
if(oddsFilter){
dsub<-filter(dsub,oddsCond==subOddsCond)
}
if(MagFilter){
dsub<-filter(dsub,magCond==subMagCond)
}
if(oddsScoreKnob){
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter to get OddsScore
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
soddsN=rbind(soddsN,oddsNtemp)}
#Breaking down by subFilter to get MagScore
if(magScoreKnob){
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
smagN=rbind(smagN,magNtemp)
}
#Breaking down subdf by gambleDelay
d4<-dsub %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (subplotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(1,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#Have to put in a check to see if they actually gambled
if(sum(d4$percentageGambled)>0){
#One participant RT
d4RT<-filter(dsub,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=median(gambleRT),
sdRT=sd(gambleRT))
d4RT$seconds<-d4RT$binsTime
if (subplotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
#This is tracking all the gamble slopes of everyone in subgroup
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0),family="binomial")
gambleSlopes<-c(gambleSlopes,summary(mlogtemp)$coefficients[2])
tempRTdf<-filter(dsub,response=='gamble')
mtempRT<-lm(d4RT$medianRT~d4RT$seconds)
#This is tracking all the RT slopes of everyone in subgroup
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
run<-c(run,i)
#This is just one number to see how much overall they gambled
gambleMeans=c(gambleMeans,mean(d4$percentageGambled))
}
}
subj<-unique(d$uniqueid)
intN<-NULL
botN<-NULL
rtn<-NULL
oddsN<-NULL
oddsNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(oddsNtemp)[1]<-"OddsGamblingScore"
colnames(oddsNtemp)[2]<-"Participant"
magN<-NULL
magNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(magNtemp)[1]<-"MagGamblingScore"
colnames(magNtemp)[2]<-"Participant"
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
slopeDF<-NULL
plotRT=FALSE
plotGD=TRUE
#Participants is default (all participants)
#If you want to run sub groups, go to bottom of script
for(i in Participants){
print(i)
dsub<-d[d$uniqueid==i,]
dsubgambled<-filter(dsub,response=="gamble")
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
oddsN=rbind(oddsN,oddsNtemp)
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub[dsub$gambleDelay!=0,] %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=median(gambleRT),
sdRT=sd(gambleRT))
d4RT$seconds<-d4RT$binsTime
if (plotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
#This is top check for gamble ramp
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0),family="binomial")
#This is glm for RT by gamble Delay
mtempRT<-lm(d4RT$medianRT~d4RT$seconds)
#This checks to see if any participant is gamble ramping
if(summary(mlogtemp)$coefficients[8]<.1 & summary(mlogtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's susupiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<200){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.05 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mlogtemp)$coefficients[2])
run<-c(run,i)
}
slopeDF<-data.frame(cbind(run,rtSlopes,gambleSlopes))
bonusAmounts
