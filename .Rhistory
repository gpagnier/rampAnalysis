d[i,'oddsCond']=oddsCondCalc(d,i)
}
#Adding another column 1 if they gambled, 0 if they didn't
#This will be outcome variable in logistic regression
d$gambled=NULL
for (i in 1:length(d$response)){
if(d$response[i]=='gamble'){
d$gambled[i]=1
} else {
d$gambled[i]=0
}
}
#This is a column for highest gamble shown (used to calculate RPE2 and RPE3)
d$gambleMaxAmt=NULL
for (i in 1:length(d$response)){
if(d$oddsCond[i]=='lowp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*1.5)
} else if(d$oddsCond[i]=='midp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*2)
}else if(d$oddsCond[i]=='highp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*3)
} else {
d$gambleMaxAmt[i]=d$standardGamble[i]
}
}
#Adding prediction errors:
#Adding prediction errors as possible variable
d2=d[0,]
#rpe 1 2 and 3
d$rpe1=NULL
d$rpe2=NULL
d$rpe3=NULL
d$gamblePrevTrial=NULL
#RT z score
#Should I do z scores on speed or raw RT?
d$ignoreRTz<-NULL
d$outcomeRTz<-NULL
acfdf<-matrix(NA, ncol = 133, nrow =0)
Participants<-unique(d$uniqueid)
for (i in Participants){
dsub<-filter(d,uniqueid==i)
if(length(dsub$gambled)==133){
acfdf<-rbind(acfdf,dsub$gambled)
}
}
#Adding vector to filter out fast RTers
fastRTers<-NULL
#Adding RPE as a factor AND normalized RT z score
#rpe1 is the sure thing of trial t- standard gamble of t-1
#rpe2 is the sure thing of t - the average of whatever was chosen in t-1
#rpe3 is the sure thing of t - whatever was chosen in t-1 but the highest gamble option instead of average
for (i in Participants){
dsub<-filter(d,uniqueid==i)
if(nrow(dsub)<50|length(setdiff(dsub$ignoreRT,0))<10){
next()
}
if(sum(dsub$response=='gamble')<10|sum(dsub$response=='success')<10){
next()
}
dsub[1,"rpe1"]=dsub[1,"standardGamble"]
dsub[1,"rpe2"]=dsub[1,"standardGamble"]
dsub[1,"rpe3"]=dsub[1,"standardGamble"]
#This is adding RPE
for (row in 2:length(dsub$Trialid)){
#This is essentially calculating the difference between potential reward on trial
#t - reward on trial t-1
dsub[row,"rpe1"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
#This is rpe2
#And gamblingPrevTrial
if(dsub[(row-1),"gambled"]){
dsub[row,"rpe2"]=(dsub[row,"standardGamble"]-(dsub[(row-1),"gambleMaxAmt"]/2))
dsub[row,"gamblePrevTrial"]=1
} else{
dsub[row,"rpe2"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
dsub[row,"gamblePrevTrial"]=0
}
}
#This is rpe3
for (row in 2:length(dsub$Trialid)){
if(dsub[(row-1),"gambled"]){
dsub[row,"rpe3"]=(dsub[row,"standardGamble"]-(dsub[(row-1),"gambleMaxAmt"]))
} else{
dsub[row,"rpe3"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
}
}
#This is calculating normalized z score for dsub
meanGambleZ=mean(dsub$ignoreRT[dsub$ignoreRT!=0])
meanOutcomeZ=mean(dsub$outcomeRT[dsub$outcomeRT!=0])
sdGambleZ=sd(dsub$ignoreRT[dsub$ignoreRT!=0])
sdOutcomeZ=sd(dsub$outcomeRT[dsub$outcomeRT!=0])
for(row in 1:length(dsub$Trialid)){
if(dsub[row,"ignoreRT"]!=0){
dsub[row,"ignoreRTz"]=(dsub[row,"ignoreRT"]-meanGambleZ)/sdGambleZ
} else if(dsub[row,"ignoreRT"]==0){
dsub[row,"ignoreRTz"]=0
}
if(dsub[row,"outcomeRT"]!=0){
dsub[row,"outcomeRTz"]=(dsub[row,"outcomeRT"]-meanOutcomeZ)/sdOutcomeZ
} else if(dsub[row,"outcomeRT"]==0){
dsub[row,"outcomeRTz"]=0
}
}
#Fitering out fast RTers
if(nrow(filter(dsub,outcomeRT>0&outcomeRT<150))>20){
fastRTers<-c(fastRTers,unique(dsub$uniqueid))
}
d2=rbind(d2,dsub)
}
d=d2
#Normalized RT log(1/RT) to get speed
d$NignoreRT=0
d$NoutcomeRT=0
#Dividing ignoreRT by (1/RT) on new column
for(i in 1:length(d$response)){
if(d[i,"ignoreRT"]!=0){
d[i,"NignoreRT"]=(1/d[i,"ignoreRT"])
}
}
#Dividing OutcomeRT by 1/RT
for(i in 1:length(d$response)){
if(d[i,"outcomeRT"]!=0){
d[i,"NoutcomeRT"]=(1/d[i,"outcomeRT"])
}
}
nParticipants<- length(unique(d$uniqueid))
nParticipants
###Behavioral analyses
##Reaction time
#Whenever they gambled
ignoreRTs<-d$ignoreRT[d$ignoreRT!=0]
hist(ignoreRTs,main="Aggregated gamble RTs",breaks=70)
#Whenever they claimed 'boring' reward
outcomeRTs<-d$outcomeRT[d$outcomeRT!=0]
hist(ignoreRTs,main="Aggregated ignore RTs",breaks=70)
hist(ignoreRTs,main="Aggregated gamble RTs",breaks=70)
hist(ignoreRTs,main="Aggregated ignore RTs",breaks=70)
#Need to replace uniqueid with numbers and clean out columns that aren't useful
d<-d0[,c("Trialid","gambleDelay","ignoreRT","gambleRT","outcomeRT","response","standardGamble","trialNumber","uniqueid")]
d<-subset(d,!grepl("debug",as.character(d$uniqueid)))
d<-subset(d,d$response!="")
d$engagement<-NULL
#d0<-read.csv(file.choose())
#Cleaning data for totalrampv3
d0<-d0[214:length(d0$viewTime),]
d0<-subset(d0,!grepl("debug",as.character(d0$uniqueid)))
bonusAmountsTemp=data.frame(matrix(NA, ncol = 2, nrow =1))
bonusAmounts=bonusAmountsTemp
for (i in 1:length(d0$BonusAmount)){
if(!is.na(d0[i,2])){
bonusAmountsTemp[1,1]=as.integer(d0[i,"BonusAmount"])
bonusAmountsTemp[1,2]=as.character(d0[i,"uniqueid"])
bonusAmounts=rbind(bonusAmounts,bonusAmountsTemp)
}
}
bonusAmounts=bonusAmounts[-1,]
colnames(bonusAmounts)[1]<-"Amount"
colnames(bonusAmounts)[2]<-"ID"
bonusAmounts<-unique(bonusAmounts)
bonusAmounts
#If you want to see survey results
dsurvey<-d0 %>%
group_by(uniqueid) %>%
summarise(engagement=unique(engagement)[2],
difficulty=unique(difficulty)[2],
length=unique(length)[2],
design=unique(design)[2],
gender=unique(gender)[2],
interest=unique(interest)[2],
understand=unique(understand)[2])
#Removing rows that have empty column values (specifically if gender is empty)
dsurvey<-dsurvey[!(is.na(dsurvey$gender)|dsurvey$gender==""),]
#Engagment: how engaging, 1 is not, 10 is very engaging
hist(as.integer(dsurvey$engagement),breaks=50,main="Length: 10 is very engaging")
#difficult: 1 is easy, 10 is hard
hist(as.integer(dsurvey$difficulty),breaks=50,main="Length: 10 is too hard")
#length: 1 is could be longer, 10 is much too long
hist(as.integer(dsurvey$length),breaks=50,main="Length: 10 is too long")
#design: how engaging, 1 is unplayable, 4 is worked fine
table(as.integer(dsurvey$design))
#Gender: 1 male, 2 is female 4: decline to answer
table(as.integer(dsurvey$gender))
#interest: 1 is no way; 10 is absolutely yes
hist(as.integer(dsurvey$interest),breaks=50,main="interest; 10 is very interesting")
#understand
hist(as.integer(dsurvey$understand),breaks=50,main="interest; 10 is very easy to understand")
#Need to replace uniqueid with numbers and clean out columns that aren't useful
d<-d0[,c("Trialid","gambleDelay","ignoreRT","gambleRT","outcomeRT","response","standardGamble","trialNumber","uniqueid")]
d<-subset(d,!grepl("debug",as.character(d$uniqueid)))
d<-subset(d,d$response!="")
d$engagement<-NULL
d$difficulty<-NULL
d$length<-NULL
d$design<-NULL
d$gender<-NULL
d$interest<-NULL
#Adding survey answers
d2=NULL
for(i in unique(d$uniqueid)){
d0sub<-filter(d0,uniqueid==i)
dsub<-filter(d,uniqueid==i)
dsub$engagement=unique(d0sub$engagement)[2]
dsub$difficulty=unique(d0sub$difficulty)[2]
dsub$length=unique(d0sub$length)[2]
dsub$design=unique(d0sub$design)[2]
dsub$gender=unique(d0sub$gender)[2]
dsub$interest=unique(d0sub$interest)[2]
dsub$expTime=unique(d0sub$expTime)[2]
d2<-rbind(d2,dsub)
}
d<-d2
#Adding col uniqueID uniqueid with numbers
d$uniqueID=NA
seed=601
d[1,"uniqueID"]<-seed
for (i in 2:nrow(d)){
if(d[i,"uniqueid"]==d[i-1,"uniqueid"]){
d[i,"uniqueID"]=d[i-1,"uniqueID"]
}
else if (d[i,"uniqueid"]!=d[i-1,"uniqueid"]){
d[i,"uniqueID"]=(d[i-1,"uniqueID"]+1)
}
}
unique(d$uniqueID)
d$uniqueid=d$uniqueID
d$uniqueID=NULL
#############################################################################################################################
#Now we have a dataframe we can work with
#Replace any empty cell with NA
#Colnames should now be:
#"trialid" #"expTime" "gambleDelay" "ignoreRT" "outcomeRT" "response" "standardGamble" "trialNumber" "uniqueid"
d[d==""] <- NA
d$gambleDelay<-d$gambleDelay/1000
d$binsTime=0;
#Clearing pictures
graphics.off()
##Some basic behavioral metrics and filtering participants and adding gamble delay
#Intitial filtering of participants
removeIds=c()
for(i in removeIds){
d<-d[!(d$uniqueid==i),]
}
unique(d$uniqueid)
#Where did gambles interrupt
hist(d$gambleDelay,breaks=50,xlim=c(0,8),main="When did gambles interrupt the progress bar?",xlab="Seconds into trial gamble appeared",col='black',ylab="Total number of trials")
#How many points do you want on the gambleDelay?
d$binsTme=NULL
bins=3
ninbins=round((length(d$Trialid)/bins))
#This creates a list with what should be in the binTimeCalc
delayValues=split(sort(d$gambleDelay[d$gambleDelay!=0]), ceiling(seq_along(d$gambleDelay[d$gambleDelay!=0])/ninbins))
#This is to manually hardcode the NUMBER of blocks you're using - can not exceed number of bins
a1head<-unlist(lapply(delayValues[1],head,1),use.names=FALSE)
a1tail<-unlist(lapply(delayValues[1],tail,1),use.names=FALSE)
a2head<-unlist(lapply(delayValues[2],head,1),use.names=FALSE)
a2tail<-unlist(lapply(delayValues[2],tail,1),use.names=FALSE)
a3head<-unlist(lapply(delayValues[3],head,1),use.names=FALSE)
a3tail<-unlist(lapply(delayValues[3],tail,1),use.names=FALSE)
a4head<-unlist(lapply(delayValues[4],head,1),use.names=FALSE)
a4tail<-unlist(lapply(delayValues[4],tail,1),use.names=FALSE)
a5head<-unlist(lapply(delayValues[5],head,1),use.names=FALSE)
a5tail<-unlist(lapply(delayValues[5],tail,1),use.names=FALSE)
a6head<-unlist(lapply(delayValues[6],head,1),use.names=FALSE)
a6tail<-unlist(lapply(delayValues[6],tail,1),use.names=FALSE)
a7head<-unlist(lapply(delayValues[7],head,1),use.names=FALSE)
a7tail<-unlist(lapply(delayValues[7],tail,1),use.names=FALSE)
a8head<-unlist(lapply(delayValues[8],head,1),use.names=FALSE)
a8tail<-unlist(lapply(delayValues[8],tail,1),use.names=FALSE)
a9head<-unlist(lapply(delayValues[9],head,1),use.names=FALSE)
a9tail<-unlist(lapply(delayValues[9],tail,1),use.names=FALSE)
a10head<-unlist(lapply(delayValues[10],head,1),use.names=FALSE)
a10tail<-unlist(lapply(delayValues[10],tail,1),use.names=FALSE)
#Manually setting bins
#For totalRampv3
#For 6 bins
a1head<-1.4
a1tail<-1.999999
a2head<-2
a2tail<-2.5
a3head<-3.75
a3tail<-3.999999
a4head<-4
a4tail<-4.5
a5head<-5.8
a5tail<-6.24
a6head<-6.24000000001
a6tail<-6.8
#For 3 bins
a1head<-1.5
a1tail<-2.5
a2head<-3.5
a2tail<-4.5
a3head<-5.5
a3tail<-6.5
#This is the function that creates gambleBins
binTimeCalc<-function(d,row){
if(d[row,'gambleDelay']==0)
{return(0)}
else if (d[row,'gambleDelay']>0&d[row,'gambleDelay']<=a1tail)
{return(mean(c(a1head,a1tail)))}
else if (d[row,'gambleDelay']>=a2head&d[row,'gambleDelay']<=a2tail)
{return(mean(c(a2head,a2tail)))}
else if (d[row,'gambleDelay']>=a3head&d[row,'gambleDelay']<=a3tail)
{return(mean(c(a3head,a3tail)))}
# else if (d[row,'gambleDelay']>=a4head&d[row,'gambleDelay']<=a4tail)
# {return(mean(c(a4head,a4tail)))}
# else if (d[row,'gambleDelay']>=a5head&d[row,'gambleDelay']<=a5tail)
# {return(mean(c(a5head,a5tail)))}
# else if (d[row,'gambleDelay']>=a6head&d[row,'gambleDelay']<=a6tail)
# {return(mean(c(a6head,a6tail)))}
# else if (d[row,'gambleDelay']>=a7head&d[row,'gambleDelay']<=a7tail)
# {return(mean(c(a7head,a7tail)))}
# else if (d[row,'gambleDelay']>=a8head&d[row,'gambleDelay']<=a8tail)
# {return(mean(c(a8head,a8tail)))}
# else if (d[row,'gambleDelay']>=a9head&d[row,'gambleDelay']<=max(d$gambleDelay))
# {return(mean(c(a9head,a9tail)))}
else
{return(999)}
}
#Actually running the functon
for(i in 1:nrow(d)){
d[i,'binsTime']=binTimeCalc(d,i)
}
#Creating new df to see how many ended up in each bin/ this is sanity check
dbins<-d %>%
group_by(binsTime) %>%
summarise(Number=length(response))
dbins
# };
dbins<-d %>%
group_by(binsTime) %>%
summarise(Number=length(response))
dbins
d<-filter(d,binsTime<999)
#Adding which condition trial was in
#For new data set
d$magCond<-NULL
magCondCalc<-function(d,row){
if(d[row,'standardGamble']==1|d[row,'standardGamble']==2){
return("low")
} else if (d[row,'standardGamble']==3|d[row,'standardGamble']==4){
return("mid")
} else if (d[row,'standardGamble']==5|d[row,'standardGamble']==6){
return("high")
} else{
return("null")
}
}
for(i in 1:nrow(d)){
d[i,'magCond']=magCondCalc(d,i)
}
d$oddsCond<-NULL
oddsCondCalc<-function(d,row){
if(d[row,'Trialid']==21|d[row,'Trialid']==22|d[row,'Trialid']==23|d[row,'Trialid']==24|d[row,'Trialid']==25|d[row,'Trialid']==26){
return("lowp")
} else if (d[row,'Trialid']==1|d[row,'Trialid']==2|d[row,'Trialid']==3|d[row,'Trialid']==4|d[row,'Trialid']==5|d[row,'Trialid']==6){
return("midp")
} else if (d[row,'Trialid']==31|d[row,'Trialid']==32|d[row,'Trialid']==33|d[row,'Trialid']==34|d[row,'Trialid']==35|d[row,'Trialid']==36){
return("highp")
} else{
return("catch")
}
}
for(i in 1:nrow(d)){
d[i,'oddsCond']=oddsCondCalc(d,i)
}
#Adding another column 1 if they gambled, 0 if they didn't
#This will be outcome variable in logistic regression
d$gambled=NULL
for (i in 1:length(d$response)){
if(d$response[i]=='gamble'){
d$gambled[i]=1
} else {
d$gambled[i]=0
}
}
#This is a column for highest gamble shown (used to calculate RPE2 and RPE3)
d$gambleMaxAmt=NULL
for (i in 1:length(d$response)){
if(d$oddsCond[i]=='lowp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*1.5)
} else if(d$oddsCond[i]=='midp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*2)
}else if(d$oddsCond[i]=='highp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*3)
} else {
d$gambleMaxAmt[i]=d$standardGamble[i]
}
}
#Adding prediction errors:
#Adding prediction errors as possible variable
d2=d[0,]
#rpe 1 2 and 3
d$rpe1=NULL
d$rpe2=NULL
d$rpe3=NULL
d$gamblePrevTrial=NULL
#RT z score
#Should I do z scores on speed or raw RT?
d$ignoreRTz<-NULL
d$outcomeRTz<-NULL
acfdf<-matrix(NA, ncol = 133, nrow =0)
Participants<-unique(d$uniqueid)
for (i in Participants){
dsub<-filter(d,uniqueid==i)
if(length(dsub$gambled)==133){
acfdf<-rbind(acfdf,dsub$gambled)
}
}
#Adding vector to filter out fast RTers
fastRTers<-NULL
#Adding RPE as a factor AND normalized RT z score
#rpe1 is the sure thing of trial t- standard gamble of t-1
#rpe2 is the sure thing of t - the average of whatever was chosen in t-1
#rpe3 is the sure thing of t - whatever was chosen in t-1 but the highest gamble option instead of average
for (i in Participants){
dsub<-filter(d,uniqueid==i)
if(nrow(dsub)<50|length(setdiff(dsub$ignoreRT,0))<10){
next()
}
if(sum(dsub$response=='gamble')<10|sum(dsub$response=='success')<10){
next()
}
dsub[1,"rpe1"]=dsub[1,"standardGamble"]
dsub[1,"rpe2"]=dsub[1,"standardGamble"]
dsub[1,"rpe3"]=dsub[1,"standardGamble"]
#This is adding RPE
for (row in 2:length(dsub$Trialid)){
#This is essentially calculating the difference between potential reward on trial
#t - reward on trial t-1
dsub[row,"rpe1"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
#This is rpe2
#And gamblingPrevTrial
if(dsub[(row-1),"gambled"]){
dsub[row,"rpe2"]=(dsub[row,"standardGamble"]-(dsub[(row-1),"gambleMaxAmt"]/2))
dsub[row,"gamblePrevTrial"]=1
} else{
dsub[row,"rpe2"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
dsub[row,"gamblePrevTrial"]=0
}
}
#This is rpe3
for (row in 2:length(dsub$Trialid)){
if(dsub[(row-1),"gambled"]){
dsub[row,"rpe3"]=(dsub[row,"standardGamble"]-(dsub[(row-1),"gambleMaxAmt"]))
} else{
dsub[row,"rpe3"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
}
}
#This is calculating normalized z score for dsub
meanGambleZ=mean(dsub$ignoreRT[dsub$ignoreRT!=0])
meanOutcomeZ=mean(dsub$outcomeRT[dsub$outcomeRT!=0])
sdGambleZ=sd(dsub$ignoreRT[dsub$ignoreRT!=0])
sdOutcomeZ=sd(dsub$outcomeRT[dsub$outcomeRT!=0])
for(row in 1:length(dsub$Trialid)){
if(dsub[row,"ignoreRT"]!=0){
dsub[row,"ignoreRTz"]=(dsub[row,"ignoreRT"]-meanGambleZ)/sdGambleZ
} else if(dsub[row,"ignoreRT"]==0){
dsub[row,"ignoreRTz"]=0
}
if(dsub[row,"outcomeRT"]!=0){
dsub[row,"outcomeRTz"]=(dsub[row,"outcomeRT"]-meanOutcomeZ)/sdOutcomeZ
} else if(dsub[row,"outcomeRT"]==0){
dsub[row,"outcomeRTz"]=0
}
}
#Fitering out fast RTers
if(nrow(filter(dsub,outcomeRT>0&outcomeRT<150))>20){
fastRTers<-c(fastRTers,unique(dsub$uniqueid))
}
d2=rbind(d2,dsub)
}
head(d)
head(d2)
d=d2
#Normalized RT log(1/RT) to get speed
d$NignoreRT=0
d$NoutcomeRT=0
#Dividing ignoreRT by (1/RT) on new column
for(i in 1:length(d$response)){
if(d[i,"ignoreRT"]!=0){
d[i,"NignoreRT"]=(1/d[i,"ignoreRT"])
}
}
#Dividing OutcomeRT by 1/RT
for(i in 1:length(d$response)){
if(d[i,"outcomeRT"]!=0){
d[i,"NoutcomeRT"]=(1/d[i,"outcomeRT"])
}
}
nParticipants<- length(unique(d$uniqueid))
nParticipants
###Behavioral analyses
##Reaction time
#Whenever they gambled
ignoreRTs<-d$ignoreRT[d$ignoreRT!=0]
hist(ignoreRTs,main="Aggregated gamble RTs",breaks=70)
#Whenever they claimed 'boring' reward
outcomeRTs<-d$outcomeRT[d$outcomeRT!=0]
hist(outcomeRTs,main=c("Aggregated outcome RTs; number of trials:",length(outcomeRTs)),breaks=70)
#Printing experiment times in minutes CONFIRM PSITURK TRACKS IN MILLISECONDS
expTimes<-((unique(d$expTime,na.rm=TRUE)/1000)/60)
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70)
gambleRTs<-d$gambleRT[d$gambleRT!=0]
hist(ignoreRTs,main="Aggregated gamble RTs",breaks=70)
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70)
hist(ignoreRTs,main="Aggregated gamble RTs",breaks=70,xlim=c(0,1550))
hist(ignoreRTs,main="Aggregated gamble RTs",breaks=70,xlim=c(0,1600))
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70,xlim=c(0,1600))
colnames(d)
colnames(d0)
#Need to replace uniqueid with numbers and clean out columns that aren't useful
d<-d0[,c("Trialid","gambleDelay","ignoreRT","gambleRT","outcomeRT","response","standardGamble","trialNumber","uniqueid","trialType")]
