nParticipants
###Behavioral analyses
##Reaction time
#Whenever they gambled
gambleRTs<-d$gambleRT[d$gambleRT!=0]
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70,xlim=c(0,1600))
###Behavioral analyses
##Reaction time
#Whenever they gambled
gambleRTs<-d$gambleRT[d$gambleRT!=0]
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70,xlim=c(0,1800))
###Behavioral analyses
##Reaction time
#Whenever they gambled
gambleRTs<-d$gambleRT[d$gambleRT!=0]
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70,xlim=c(0,2000))
#Whenever they ignored
ignoreRTs<-d$ignoreRT[d$ignoreRT!=0]
#Whenever they ignored
ignoreRTs<-d$ignoreRT[d$ignoreRT!=0]
hist(ignoreRTs,main="Aggregated ignore RTs",breaks=70,xlim=c(0,1600))
hist(ignoreRTs,main="Aggregated ignore RTs",breaks=70,xlim=c(0,2000))
#Outcome of whenever they claimed 'boring' reward and didn't gamble
successOutcomeRTs<-d$outcomeRT[d$response=='success']
hist(successOutcomeRTs,main=c("Aggregated outcome RTs; number of responses:",length(successOutcomeRTs)),breaks=70)
hist(successOutcomeRTs,main=c("Aggregated outcome RTs when they ignored; number of responses:",length(successOutcomeRTs)),breaks=70)
#Outcome of whenever they gambled and confirmed
gambleOutcomeRTs<-d$outcomeRT[d$response=='gamble']
hist(gambleOutcomeRTs,main=c("Aggregated outcome RTs when they accepted gamble; number of responses:",length(gambleOutcomeRTs)),breaks=70)
#Comparison of gamble RT vs Ignore RT
boxplot(gambleRTs,ignoreRTs,at=c(1,2),names=(c("gamble RT","ignoreRT")),main="RT at gamble presentation: gamble vs ignore")
t.test(gambleRTs,ignoreRTs)
#Comparison of outcome RTs when gambled vs no gambled
boxplot(successOutcomeRTs,gambleOutcomeRTs,at=c(1,2),names=(c("outcome RT after ignoring","outcome RT after gambling")),main="outcomeRT at end of progress bar")
t.test(gambleOutcomeRTs,successOutcomeRTs)
#histrogram of individial gambling behavior
hist(dTrials$gambleCount,breaks=50,xlim=c(0,140),main=paste("Number of gambled trials per participant; ",nParticipants,"participants"),xlab="Number of Trials per participant")
#dTrials
hist(dTrials$ntrials,breaks=50,xlim=c(0,140),main=paste("Number of trials per participant; ",nParticipants,"participants"),xlab="Number of Trials per participant")
#Removing participants who gambled too much/not enough
dBehavioralTotal<-dgamble0 %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
successTrials=sum(response=="success"),
percentageGambled=round(gambleCount/trials*100),
failedTrials=sum(response=='gambleFail'|response=='failOutcome'))
head(dBehavioralTotal)
#Overall preference for gambling
hist(dBehavioralTotal$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall participant propensity(everyone) to gamble; n =",toString(sum(dBehavioralTotal$trials)),"trials;",nParticipants,"participants"),xlab="Percentage of time gambled")
dlowg<-filter(dBehavioralTotal,percentageGambled<9)
noGamblers<-dlowg$uniqueid
dhighg<-filter(dBehavioralTotal,percentageGambled>95)
allGamblers<-dhighg$uniqueid
lowTrials<-filter(dBehavioralTotal,trials<50)$uniqueid
failures<-filter(dBehavioralTotal,failedTrials>(round(15/trials*100)))$uniqueid
length(c(noGamblers,allGamblers,lowTrials,fastRTers,failures))
removeIds<-c(noGamblers,allGamblers,lowTrials,fastRTers,failures)
nParticipants<- length(unique(d$uniqueid))
nParticipants
################################################################################################
#Statistics
#Resetting dgamble
dgamble<-filter(d,gambleDelay!=0,Trialid!=75,Trialid!=86)
#Check for any NA in any column
apply(dgamble, 2, function(x) any(is.na(x)))
#Logistic regression models to predict gambled
#Recoding
dgamble$contOdds<-recode(dgamble$oddsCond,lowp=1,midp=2,highp=3)
dgamble$contMag<-recode(dgamble$magCond,low=1,mid=2,high=3)
#Need to figure out which one to use
mlog<-glm(gambled~contOdds,
data=dgamble,family="binomial");
summary(mlog)
mlog2<-glm(gambled~gambleDelay*contOdds+trialNumber+contMag+contMag:gambleDelay,
data=dgamble,family="binomial");
summary(mlog2)
#All data
gamblePlot(d,title="All data",ylim=c(30,50),orig=F,eb='sem',standardized=T)
gamblePlot<-function(data,orig=TRUE,eb='',line=FALSE,ylimit=c(0,100),title="",trialType="",standardized=F){
if(trialType==""){
color="black"
data<-filter(data,gambleDelay!=0,Trialid!=75|86)
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleLeft"){
color="purple"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleLeft')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleRight"){
color="red"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleRight')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
}
d2fun$seconds<-d2fun$binsTime
if(orig){
plot(d2fun$seconds,d2fun$percentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title, "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,col=color)
if(line){
abline(lm(d2fun$percentageGambled~d2fun$seconds))
}
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}else{
d2pfun<-filter(data,gambleDelay!=0) %>%
group_by(binsTime,uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100),
baselineGambling=unique(baselineGambling),
standardizedGamblingPercentage=percentageGambled-baselineGambling)
d2pfun$seconds<-d2pfun$binsTime
dTestfun<-d2pfun %>%
group_by(seconds) %>%
summarise(meanPercentageGambled=mean(percentageGambled),
medianPercentageGambled=median(percentageGambled),
sdPercentageGambled=sd(percentageGambled),
stdPercentageGambled=std.error(percentageGambled),
meanStandardizedGambled=mean(standardizedGamblingPercentage),
sdStandardizedGambled=sd(standardizedGamblingPercentage),
stdStandardizedGambled=std.error(standardizedGamblingPercentage))
if(Standardized){
plot(dTestfun$seconds,dTestfun$meanStandardizedGambled,xlim = c(0,5),ylim=c(-5,5),
main=paste("Standardized Gamble Propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$standardizedGamblingPercentage~d2fun$seconds))
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']+(as.numeric(dTestfun[i,'stdStandardizedGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']-(as.numeric(dTestfun[i,'stdStandardizedGambled']))),length=0.05, angle=90, code=3)
}
}
}else{
plot(dTestfun$seconds,dTestfun$meanPercentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}
if(line){
abline(lm(dTestfun$meanPercentageGambled~dTestfun$seconds))
}
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'stdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'stdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}else if(eb=='std'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'sdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'sdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}
}
}
#All data
gamblePlot(d,title="All data",ylim=c(30,50),orig=F,eb='sem',standardized=T)
gamblePlot<-function(data,orig=TRUE,eb='',line=FALSE,ylimit=c(0,100),title="",trialType="",standardized=F){
if(trialType==""){
color="black"
data<-filter(data,gambleDelay!=0,Trialid!=75|86)
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleLeft"){
color="purple"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleLeft')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleRight"){
color="red"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleRight')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
}
d2fun$seconds<-d2fun$binsTime
if(orig){
plot(d2fun$seconds,d2fun$percentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title, "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,col=color)
if(line){
abline(lm(d2fun$percentageGambled~d2fun$seconds))
}
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}else{
d2pfun<-filter(data,gambleDelay!=0) %>%
group_by(binsTime,uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100),
baselineGambling=unique(baselineGambling),
standardizedGamblingPercentage=percentageGambled-baselineGambling)
d2pfun$seconds<-d2pfun$binsTime
dTestfun<-d2pfun %>%
group_by(seconds) %>%
summarise(meanPercentageGambled=mean(percentageGambled),
medianPercentageGambled=median(percentageGambled),
sdPercentageGambled=sd(percentageGambled),
stdPercentageGambled=std.error(percentageGambled),
meanStandardizedGambled=mean(standardizedGamblingPercentage),
sdStandardizedGambled=sd(standardizedGamblingPercentage),
stdStandardizedGambled=std.error(standardizedGamblingPercentage))
if(standardized){
plot(dTestfun$seconds,dTestfun$meanStandardizedGambled,xlim = c(0,5),ylim=c(-5,5),
main=paste("Standardized Gamble Propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$standardizedGamblingPercentage~d2fun$seconds))
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']+(as.numeric(dTestfun[i,'stdStandardizedGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']-(as.numeric(dTestfun[i,'stdStandardizedGambled']))),length=0.05, angle=90, code=3)
}
}
}else{
plot(dTestfun$seconds,dTestfun$meanPercentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}
if(line){
abline(lm(dTestfun$meanPercentageGambled~dTestfun$seconds))
}
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'stdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'stdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}else if(eb=='std'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'sdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'sdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}
}
}
#All data
gamblePlot(d,title="All data",ylim=c(30,50),orig=F,eb='sem',standardized=T)
color="black"
data=d
data<-filter(data,gambleDelay!=0,Trialid!=75|86)
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
d2fun$seconds<-d2fun$binsTime
d2pfun<-filter(data,gambleDelay!=0) %>%
group_by(binsTime,uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100),
baselineGambling=unique(baselineGambling),
standardizedGamblingPercentage=percentageGambled-baselineGambling)
d2pfun$seconds<-d2pfun$binsTime
dTestfun<-d2pfun %>%
group_by(seconds) %>%
summarise(meanPercentageGambled=mean(percentageGambled),
medianPercentageGambled=median(percentageGambled),
sdPercentageGambled=sd(percentageGambled),
stdPercentageGambled=std.error(percentageGambled),
meanStandardizedGambled=mean(standardizedGamblingPercentage),
sdStandardizedGambled=sd(standardizedGamblingPercentage),
stdStandardizedGambled=std.error(standardizedGamblingPercentage))
if(standardized){
plot(dTestfun$seconds,dTestfun$meanStandardizedGambled,xlim = c(0,5),ylim=c(-5,5),
main=paste("Standardized Gamble Propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$standardizedGamblingPercentage~d2fun$seconds))
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']+(as.numeric(dTestfun[i,'stdStandardizedGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']-(as.numeric(dTestfun[i,'stdStandardizedGambled']))),length=0.05, angle=90, code=3)
}
}
}else{
plot(dTestfun$seconds,dTestfun$meanPercentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}
plot(dTestfun$seconds,dTestfun$meanStandardizedGambled,xlim = c(0,5),ylim=c(-5,5),
main=paste("Standardized Gamble Propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
toString(length(data$response[data$response=='gamble']))
toString(length(unique(data$uniqueid)))
paste("Standardized Gamble Propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants")
"Standardized Gamble Propensity",title,";"
paste("Standardized Gamble Propensity",title,";", "n =",
"gambled trials;",toString(length(unique(data$uniqueid))),"participants")
paste("Standardized Gamble Propensity",title)
paste("Standardized Gamble Propensity",";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants")
gamblePlot<-function(data,orig=TRUE,eb='',line=FALSE,ylimit=c(0,100),title="",trialType="",standardized=F){
if(trialType==""){
color="black"
data<-filter(data,gambleDelay!=0,Trialid!=75|86)
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleLeft"){
color="purple"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleLeft')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleRight"){
color="red"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleRight')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
}
d2fun$seconds<-d2fun$binsTime
if(orig){
plot(d2fun$seconds,d2fun$percentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title, "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,col=color)
if(line){
abline(lm(d2fun$percentageGambled~d2fun$seconds))
}
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}else{
d2pfun<-filter(data,gambleDelay!=0) %>%
group_by(binsTime,uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100),
baselineGambling=unique(baselineGambling),
standardizedGamblingPercentage=percentageGambled-baselineGambling)
d2pfun$seconds<-d2pfun$binsTime
dTestfun<-d2pfun %>%
group_by(seconds) %>%
summarise(meanPercentageGambled=mean(percentageGambled),
medianPercentageGambled=median(percentageGambled),
sdPercentageGambled=sd(percentageGambled),
stdPercentageGambled=std.error(percentageGambled),
meanStandardizedGambled=mean(standardizedGamblingPercentage),
sdStandardizedGambled=sd(standardizedGamblingPercentage),
stdStandardizedGambled=std.error(standardizedGamblingPercentage))
if(standardized){
plot(dTestfun$seconds,dTestfun$meanStandardizedGambled,xlim = c(0,5),ylim=c(-5,5),
main=paste("Standardized Gamble Propensity",";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$standardizedGamblingPercentage~d2fun$seconds))
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']+(as.numeric(dTestfun[i,'stdStandardizedGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']-(as.numeric(dTestfun[i,'stdStandardizedGambled']))),length=0.05, angle=90, code=3)
}
}
}else{
plot(dTestfun$seconds,dTestfun$meanPercentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}
if(line){
abline(lm(dTestfun$meanPercentageGambled~dTestfun$seconds))
}
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'stdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'stdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}else if(eb=='std'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'sdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'sdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}
}
}
#All data
gamblePlot(d,title="All data",ylim=c(30,50),orig=F,eb='sem',standardized=T)
gamblePlot<-function(data,orig=TRUE,eb='',line=FALSE,ylimit=c(0,100),title="",trialType="",standardized=F){
if(trialType==""){
color="black"
data<-filter(data,gambleDelay!=0,Trialid!=75|86)
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleLeft"){
color="purple"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleLeft')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleRight"){
color="red"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleRight')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
}
d2fun$seconds<-d2fun$binsTime
if(orig){
plot(d2fun$seconds,d2fun$percentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title, "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,col=color)
if(line){
abline(lm(d2fun$percentageGambled~d2fun$seconds))
}
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}else{
d2pfun<-filter(data,gambleDelay!=0) %>%
group_by(binsTime,uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100),
baselineGambling=unique(baselineGambling),
standardizedGamblingPercentage=percentageGambled-baselineGambling)
d2pfun$seconds<-d2pfun$binsTime
dTestfun<-d2pfun %>%
group_by(seconds) %>%
summarise(meanPercentageGambled=mean(percentageGambled),
medianPercentageGambled=median(percentageGambled),
sdPercentageGambled=sd(percentageGambled),
stdPercentageGambled=std.error(percentageGambled),
meanStandardizedGambled=mean(standardizedGamblingPercentage),
sdStandardizedGambled=sd(standardizedGamblingPercentage),
stdStandardizedGambled=std.error(standardizedGamblingPercentage))
if(standardized){
plot(dTestfun$seconds,dTestfun$meanStandardizedGambled,xlim = c(0,5),ylim=c(-5,5),
main=paste("Standardized Gamble Propensity",";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']+(as.numeric(dTestfun[i,'stdStandardizedGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']-(as.numeric(dTestfun[i,'stdStandardizedGambled']))),length=0.05, angle=90, code=3)
}
}
}else{
plot(dTestfun$seconds,dTestfun$meanPercentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}
if(line){
abline(lm(dTestfun$meanPercentageGambled~dTestfun$seconds))
}
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'stdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'stdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}else if(eb=='std'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'sdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'sdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}
}
}
#All data
gamblePlot(d,title="All data",ylim=c(30,50),orig=F,eb='sem',standardized=T)
gambleRtPlot(d,xlimit=c(0,5),ylimit=c(500,1250))
switchPlot(d,ylimit=c(150,700))
switchPlot(d,ylimit=c(0,700))
switchPlot(d,ylimit=c(0,1500))
gambleRtPlot(d,xlimit=c(0,5),ylimit=c(500,1250))
View(gambleRtPlot)
