d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
oddsN=rbind(oddsN,oddsNtemp)
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub[dsub$gambleDelay!=0,] %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,ignoreRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=median(ignoreRT),
sdRT=sd(ignoreRT))
d4RT$seconds<-d4RT$binsTime
if (plotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
#This is top check for gamble ramp
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0),family="binomial")
#This is glm for RT by gamble Delay
mtempRT<-lm(d4RT$medianRT~d4RT$seconds)
#This checks to see if any participant is gamble ramping
if(summary(mlogtemp)$coefficients[8]<.1 & summary(mlogtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's susupiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<200){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.1 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making acf coefficient vectors
acf1<-c(acf1,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[2])
acf2<-c(acf2,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[3])
acf3<-c(acf3,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[4])
acf4<-c(acf4,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[5])
acf5<-c(acf5,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[6])
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mlogtemp)$coefficients[2])
run<-c(run,i)
}
####The following is to just get one participant's data
#INDIVIDUAL
p=516
plotZscore<-FALSE
dsub<-d[d$uniqueid==p,]
dsubgambled<-filter(dsub,response=="gamble")
d3<-dsub %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d3$seconds<-d3$binsTime
par(ps = 12, cex = 1, cex.main = 1)
plot(d3$seconds,d3$percentageGambled,xlim = c(1,7),ylim = c(0,100),
main=paste("Individual participant data (all trials); n =",toString(sum(d3$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled")
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0),family="binomial")
summary(mlogtemp)
#One participant RT
d3RT<-filter(dsub,ignoreRT!=0) %>%
group_by(binsTime) %>%
summarise(meanRT=mean(ignoreRT),
sdRT=sd(ignoreRT),
medianRtz=median(ignoreRTz),
sdRtz=sd(ignoreRTz))
d3RT$seconds<-d3RT$binsTime
plot(d3RT$seconds,d3RT$meanRT,xlim = c(0,8),ylim=c(200,1500),main=paste("All gambles; Reaction time with sd; n =",toString(sum(d3$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
for(i in 1:length(d3RT$seconds)){
arrows(as.numeric(d3RT$seconds[i]),as.numeric(d3RT[i,2]+(as.numeric(d3RT[i,3]))),as.numeric(d3RT$seconds[i]),as.numeric(d3RT[i,2]-(as.numeric(d3RT[i,3]))),length=0.05, angle=90, code=3)
}
dsub
####The following is to just get one participant's data
#INDIVIDUAL
p=516
plotZscore<-FALSE
dsub<-d[d$uniqueid==p,]
dsubgambled<-filter(dsub,response=="gamble")
d3<-dsub %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d3$seconds<-d3$binsTime
par(ps = 12, cex = 1, cex.main = 1)
plot(d3$seconds,d3$percentageGambled,xlim = c(1,7),ylim = c(0,100),
main=paste("Individual participant data (all trials); n =",toString(sum(d3$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled")
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0),family="binomial")
summary(mlogtemp)
head(dsub)
dsub
##Some basic behavioral metrics and filtering participants and adding gamble delay
#Intitial filtering of participants
removeIds=c(516)
for(i in removeIds){
d<-d[!(d$uniqueid==i),]
}
unique(d$uniqueid)
subj<-unique(d$uniqueid)
intN<-NULL
botN<-NULL
rtn<-NULL
oddsN<-NULL
oddsNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(oddsNtemp)[1]<-"OddsGamblingScore"
colnames(oddsNtemp)[2]<-"Participant"
magN<-NULL
magNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(magNtemp)[1]<-"MagGamblingScore"
colnames(magNtemp)[2]<-"Participant"
acf1<-NULL
acf2<-NULL
acf3<-NULL
acf4<-NULL
acf5<-NULL
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
slopeDF<-NULL
plotRT=FALSE
plotGD=FALSE
#Add in knobs for different sub categories (though this number is very small....)
#Participants is default (all pa
#Participants is default (all participants)
#If you want to run sub groups, go to bottom of script
for(i in Participants){
print(i)
dsub<-d[d$uniqueid==i,]
dsubgambled<-filter(dsub,response=="gamble")
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
oddsN=rbind(oddsN,oddsNtemp)
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub[dsub$gambleDelay!=0,] %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,ignoreRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=median(ignoreRT),
sdRT=sd(ignoreRT))
d4RT$seconds<-d4RT$binsTime
if (plotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
#This is top check for gamble ramp
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0),family="binomial")
#This is glm for RT by gamble Delay
mtempRT<-lm(d4RT$medianRT~d4RT$seconds)
#This checks to see if any participant is gamble ramping
if(summary(mlogtemp)$coefficients[8]<.1 & summary(mlogtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's susupiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<200){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.1 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making acf coefficient vectors
acf1<-c(acf1,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[2])
acf2<-c(acf2,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[3])
acf3<-c(acf3,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[4])
acf4<-c(acf4,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[5])
acf5<-c(acf5,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[6])
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mlogtemp)$coefficients[2])
run<-c(run,i)
}
Participants
Participants<-Participants[-8]
Participants
subj<-unique(d$uniqueid)
intN<-NULL
botN<-NULL
rtn<-NULL
oddsN<-NULL
oddsNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(oddsNtemp)[1]<-"OddsGamblingScore"
colnames(oddsNtemp)[2]<-"Participant"
magN<-NULL
magNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(magNtemp)[1]<-"MagGamblingScore"
colnames(magNtemp)[2]<-"Participant"
acf1<-NULL
acf2<-NULL
acf3<-NULL
acf4<-NULL
acf5<-NULL
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
slopeDF<-NULL
plotRT=FALSE
plotGD=FALSE
#Add in knobs for di
#Participants is default (all participants)
#If you want to run sub groups, go to bottom of script
for(i in Participants){
print(i)
dsub<-d[d$uniqueid==i,]
dsubgambled<-filter(dsub,response=="gamble")
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
oddsN=rbind(oddsN,oddsNtemp)
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub[dsub$gambleDelay!=0,] %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,ignoreRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=median(ignoreRT),
sdRT=sd(ignoreRT))
d4RT$seconds<-d4RT$binsTime
if (plotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
#This is top check for gamble ramp
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0),family="binomial")
#This is glm for RT by gamble Delay
mtempRT<-lm(d4RT$medianRT~d4RT$seconds)
#This checks to see if any participant is gamble ramping
if(summary(mlogtemp)$coefficients[8]<.1 & summary(mlogtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's susupiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<200){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.1 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making acf coefficient vectors
acf1<-c(acf1,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[2])
acf2<-c(acf2,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[3])
acf3<-c(acf3,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[4])
acf4<-c(acf4,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[5])
acf5<-c(acf5,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[6])
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mlogtemp)$coefficients[2])
run<-c(run,i)
}
Participants
Participants<-Participants[-8]
subj<-unique(d$uniqueid)
intN<-NULL
botN<-NULL
rtn<-NULL
oddsN<-NULL
oddsNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(oddsNtemp)[1]<-"OddsGamblingScore"
colnames(oddsNtemp)[2]<-"Participant"
magN<-NULL
magNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(magNtemp)[1]<-"MagGamblingScore"
colnames(magNtemp)[2]<-"Participant"
acf1<-NULL
acf2<-NULL
acf3<-NULL
acf4<-NULL
acf5<-NULL
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
slopeDF<-NULL
plotRT=FALSE
plotGD=FALSE
#Add in knobs for different sub categories (though this number is very small....)
#Participants is default (all participants)
#If you want to run sub groups, go to bottom of script
for(i in Participants){
print(i)
dsub<-d[d$uniqueid==i,]
dsubgambled<-filter(dsub,response=="gamble")
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
oddsN=rbind(oddsN,oddsNtemp)
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub[dsub$gambleDelay!=0,] %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,ignoreRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=median(ignoreRT),
sdRT=sd(ignoreRT))
d4RT$seconds<-d4RT$binsTime
if (plotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
#This is top check for gamble ramp
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0),family="binomial")
#This is glm for RT by gamble Delay
mtempRT<-lm(d4RT$medianRT~d4RT$seconds)
#This checks to see if any participant is gamble ramping
if(summary(mlogtemp)$coefficients[8]<.1 & summary(mlogtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's susupiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<200){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.1 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making acf coefficient vectors
acf1<-c(acf1,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[2])
acf2<-c(acf2,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[3])
acf3<-c(acf3,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[4])
acf4<-c(acf4,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[5])
acf5<-c(acf5,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[6])
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mlogtemp)$coefficients[2])
run<-c(run,i)
}
slopeDF<-data.frame(cbind(run,rtSlopes,gambleSlopes))
a<-oddsN[order(oddsN$OddsGamblingScore),]
#oddsN is the median split of people who respond well to odds
oddsN<-as.integer(a$Participant[(length(a$Participant)/2):length(a$Participant)])
#Quartile split
oddsN<-oddsN[(length(oddsN)/2):(length(oddsN))]
par(bty='n')
box(which="plot",lty='solid')
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='Individual Gamble slopes (% change/second)',ylab='Individual RT Slopes (ms/second)',pch=16,cex=0.8,main='Gamble slopes vs. RT slopes; n=141',xlim=c(-.7,.7),ylim=c(-80,50),bty='7')
abline(v=0,col="black")
abline(h=0,col="black")
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='Individual Gamble slopes (% change/second)',ylab='Individual RT Slopes (ms/second)',pch=16,cex=0.8,main='Gamble slopes vs. RT slopes; n=29',xlim=c(-.7,.7),ylim=c(-80,50),bty='7')
abline(v=0,col="black")
abline(h=0,col="black")
