a7tail<-unlist(lapply(delayValues[7],tail,1),use.names=FALSE)
a8head<-unlist(lapply(delayValues[8],head,1),use.names=FALSE)
a8tail<-unlist(lapply(delayValues[8],tail,1),use.names=FALSE)
a9head<-unlist(lapply(delayValues[9],head,1),use.names=FALSE)
a9tail<-unlist(lapply(delayValues[9],tail,1),use.names=FALSE)
a10head<-unlist(lapply(delayValues[10],head,1),use.names=FALSE)
a10tail<-unlist(lapply(delayValues[10],tail,1),use.names=FALSE)
#Manually setting bins
#For totalRampv3
#For 6 bins
a1head<-1.4
a1tail<-.9
a2head<-.90001
a2tail<-1.55
a3head<-1.5500001
a3tail<-2.2
a4head<-2.200001
a4tail<-2.85
a5head<-2.85000001
a5tail<-3.5
#For 4 bins #Use this for RM NEW
a1head<-.25
a1tail<-1.25
a2head<-1.25001
a2tail<-2
a3head<-2.00001
a3tail<-2.75
a4head<-2.75001
a4tail<-3.5
#This is the function that creates gambleBins
binTimeCalc<-function(d,row){
if(d[row,'gambleDelay']==0)
{return(0)}
else if (d[row,'gambleDelay']>0&d[row,'gambleDelay']<=a1tail)
{return(mean(c(a1head,a1tail)))}
else if (d[row,'gambleDelay']>=a2head&d[row,'gambleDelay']<=a2tail)
{return(mean(c(a2head,a2tail)))}
else if (d[row,'gambleDelay']>=a3head&d[row,'gambleDelay']<=a3tail)
{return(mean(c(a3head,a3tail)))}
else if (d[row,'gambleDelay']>=a4head&d[row,'gambleDelay']<=a4tail)
{return(mean(c(a4head,a4tail)))}
#else if (d[row,'gambleDelay']>=a5head&d[row,'gambleDelay']<=a5tail)
#{return(mean(c(a5head,a5tail)))}
#else if (d[row,'gambleDelay']>=a6head&d[row,'gambleDelay']<=a6tail)
# {return(mean(c(a6head,a6tail)))}
# else if (d[row,'gambleDelay']>=a7head&d[row,'gambleDelay']<=a7tail)
# {return(mean(c(a7head,a7tail)))}
# else if (d[row,'gambleDelay']>=a8head&d[row,'gambleDelay']<=a8tail)
# {return(mean(c(a8head,a8tail)))}
# else if (d[row,'gambleDelay']>=a9head&d[row,'gambleDelay']<=max(d$gambleDelay))
# {return(mean(c(a9head,a9tail)))}
else
{return(999)}
}
#Actually running the functon
for(i in 1:nrow(d)){
d[i,'binsTime']=binTimeCalc(d,i)
}
#Creating new df to see how many ended up in each bin/ this is sanity check
dbins<-d %>%
group_by(binsTime) %>%
summarise(Number=length(response))
dbins
#Remove/coalesce any rows with bins if the numbers are too far apart from one another
# #Right now this takes the last one and adds it to the last 'bin'
# for(i in 1:nrow(d)){
#   if(d[i,"binsTime"]==mean(c(a8head,a8tail))){
#     d[i,"binsTime"]=mean(c(a7head,a7tail))
#     i
#   }
# };
dbins<-d %>%
group_by(binsTime) %>%
summarise(Number=length(response))
dbins
#Adding which condition trial was in
#For new data set
d$magCond<-NULL
magCondCalc<-function(d,row){
if(d[row,'standardGamble']==1|d[row,'standardGamble']==2){
return("low")
} else if (d[row,'standardGamble']==4|d[row,'standardGamble']==5){
return("mid")
} else if (d[row,'standardGamble']==8|d[row,'standardGamble']==9){
return("high")
} else{
return("null")
}
}
for(i in 1:nrow(d)){
d[i,'magCond']=magCondCalc(d,i)
}
d$oddsCond<-NULL
oddsCondCalc<-function(d,row){
if(d[row,'Trialid']==21|d[row,'Trialid']==22|d[row,'Trialid']==24|d[row,'Trialid']==25|d[row,'Trialid']==28|d[row,'Trialid']==29){
return("lowp")
} else if (d[row,'Trialid']==1|d[row,'Trialid']==2|d[row,'Trialid']==4|d[row,'Trialid']==5|d[row,'Trialid']==8|d[row,'Trialid']==9){
return("midp")
} else if (d[row,'Trialid']==31|d[row,'Trialid']==32|d[row,'Trialid']==34|d[row,'Trialid']==35|d[row,'Trialid']==38|d[row,'Trialid']==39){
return("highp")
} else{
return("catch")
}
}
for(i in 1:nrow(d)){
d[i,'oddsCond']=oddsCondCalc(d,i)
}
#Adding another column 1 if they gambled, 0 if they didn't
#This will be outcome variable in logistic regression
d$gambled=NULL
for (i in 1:length(d$response)){
if(d$response[i]=='gamble'){
d$gambled[i]=1
} else {
d$gambled[i]=0
}
}
#This is a column for highest gamble shown (used to calculate RPE2 and RPE3)
d$gambleMaxAmt=NULL
for (i in 1:length(d$response)){
if(d$oddsCond[i]=='lowp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*1.5)
} else if(d$oddsCond[i]=='midp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*2)
}else if(d$oddsCond[i]=='highp'){
d$gambleMaxAmt[i]=(d$standardGamble[i]*3)
} else {
d$gambleMaxAmt[i]=d$standardGamble[i]
}
}
#Adding prediction errors:
#Adding prediction errors as possible variable
d2=d[0,]
dbackup<-d
#Adding prediction errors:
#Adding prediction errors as possible variable
d2=d[0,]
#rpe 1 2 and 3
d$rpe1=NULL
d$rpe2=NULL
d$rpe3=NULL
d$gamblePrevTrial=NULL
d$gamblePrevTrial2=NULL
d$gamblePrevTrial3=NULL
#RT z score
#Should I do z scores on speed or raw RT?
d$ignoreRTz<-NULL
d$outcomeRTz<-NULL
acfdf<-matrix(NA, ncol = 133, nrow =0)
#Length of totally unfiltered participants (minus debug)
Participants<-unique(d$uniqueid)
length(Participants)
for (i in Participants){
dsub<-filter(d,uniqueid==i)
print(nrow(dsub))
#if(length(dsub$gambled)==133){
#  acfdf<-rbind(acfdf,dsub$gambled)
#}
}
#Adding vector to filter out fast RTers
fastRTers<-NULL
fewTrials<-NULL
noIgnore<-NULL
noSuccess<-NULL
noGamble<-NULL
failures<-NULL
dbackup<-d
for (i in Participants){
dsub<-filter(d,uniqueid==i)
kickOut=0
if(nrow(dsub)<50){
fewTrials<-c(fewTrials,unique(dsub$uniqueid))
next()
}
if(length(setdiff(dsub$ignoreRT,0))<10){
noIgnore<-c(noIgnore,unique(dsub$uniqueid))
kickOut=1
}
if(sum(dsub$response=='success')<10){
noSuccess<-c(noSuccess,unique(dsub$uniqueid))
kickOut=1
}
if(sum(dsub$response=='gamble')<10){
noGamble<-c(noGamble,unique(dsub$uniqueid))
kickOut=1
}
if(kickOut==1){
next()
}
dsub[1,"rpe1"]=dsub[1,"standardGamble"]
dsub[1,"rpe2"]=dsub[1,"standardGamble"]
dsub[1,"rpe3"]=dsub[1,"standardGamble"]
#This is adding RPE
for (row in 2:length(dsub$Trialid)){
#This is essentially calculating the difference between potential reward on trial
#t - reward on trial t-1
dsub[row,"rpe1"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
#This is rpe2
#And gamblingPrevTrial
if(dsub[(row-1),"gambled"]){
dsub[row,"rpe2"]=(dsub[row,"standardGamble"]-(dsub[(row-1),"gambleMaxAmt"]/2))
dsub[row,"gamblePrevTrial"]=1
} else{
dsub[row,"rpe2"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
dsub[row,"gamblePrevTrial"]=0
}
}
#gamblePrevTrial2
for(row in 3:length(dsub$Trialid)){
if(dsub[(row-2),"gambled"]){
dsub[row,"gamblePrevTrial2"]=1
} else{
dsub[row,"gamblePrevTrial2"]=0
}
}
#gamblePrevTrial3
for(row in 4:length(dsub$Trialid)){
if(dsub[(row-3),"gambled"]){
dsub[row,"gamblePrevTrial3"]=1
} else{
dsub[row,"gamblePrevTrial3"]=0
}
}
#This is rpe3
for (row in 2:length(dsub$Trialid)){
if(dsub[(row-1),"gambled"]){
dsub[row,"rpe3"]=(dsub[row,"standardGamble"]-(dsub[(row-1),"gambleMaxAmt"]))
} else{
dsub[row,"rpe3"]=(dsub[row,"standardGamble"]-dsub[(row-1),"standardGamble"])
}
}
#This is calculating normalized z score for dsub
meanGambleZ=mean(dsub$ignoreRT[dsub$ignoreRT!=0])
meanOutcomeZ=mean(dsub$outcomeRT[dsub$outcomeRT!=0])
sdGambleZ=sd(dsub$ignoreRT[dsub$ignoreRT!=0])
sdOutcomeZ=sd(dsub$outcomeRT[dsub$outcomeRT!=0])
for(row in 1:length(dsub$Trialid)){
if(dsub[row,"ignoreRT"]!=0){
dsub[row,"ignoreRTz"]=(dsub[row,"ignoreRT"]-meanGambleZ)/sdGambleZ
} else if(dsub[row,"ignoreRT"]==0){
dsub[row,"ignoreRTz"]=0
}
if(dsub[row,"outcomeRT"]!=0){
dsub[row,"outcomeRTz"]=(dsub[row,"outcomeRT"]-meanOutcomeZ)/sdOutcomeZ
} else if(dsub[row,"outcomeRT"]==0){
dsub[row,"outcomeRTz"]=0
}
}
#Fitering out fast RTers
if(nrow(filter(dsub,outcomeRT>0&outcomeRT<150))>20){
fastRTers<-c(fastRTers,unique(dsub$uniqueid))
}
d2=rbind(d2,dsub)
}
View(d2)
d=d2
#Normalized RT log(1/RT) to get speed
d$NignoreRT=0
d$NoutcomeRT=0
#Dividing ignoreRT by (1/RT) on new column
for(i in 1:length(d$response)){
if(d[i,"ignoreRT"]!=0){
d[i,"NignoreRT"]=(1/d[i,"ignoreRT"])
}
}
#Dividing OutcomeRT by 1/RT
for(i in 1:length(d$response)){
if(d[i,"outcomeRT"]!=0){
d[i,"NoutcomeRT"]=(1/d[i,"outcomeRT"])
}
}
nParticipants<- length(unique(d$uniqueid))
nParticipants
###Behavioral analyses
##Reaction time
#Whenever they gambled
ignoreRTs<-d$ignoreRT[d$ignoreRT!=0]
gambleRTs<-d$gambleRT[d$gambleRT!=0]
hist(ignoreRTs,main="Aggregated ignore RTs",breaks=70,xlim=c(0,1600))
hist(gambleRTs,main="Aggregated gamble RTs",breaks=70,xlim=c(0,1600))
#Overlaying RT histograms of gamble and ignore RTs
hist(ignoreRTs,col=rgb(0,0,1,0.5), main='Reaction Times at gamble time', xlab='Reaction Time (ms)',breaks=70,xlim=c(0,1500))
abline(v=median(ignoreRTs),col="blue",lwd=2)
hist(gambleRTs,col=rgb(1,0,0,0.5), add=T,breaks=70)
abline(v=median(gambleRTs),col="red",lwd=2)
legend(200,35,cex=.7, bty = "n",legend=c("IgnoreRTs","GambleRTs"),col=c("blue","red"),title="",pch=15)
t.test((1/ignoreRTs),(1/gambleRTs))
#Whenever they claimed 'boring' reward
outcomeRTs<-d$outcomeRT[d$outcomeRT!=0]
hist(outcomeRTs,main=c("Aggregated outcome RTs; number of responses:",length(outcomeRTs)),breaks=70)
#Printing experiment times in minutes CONFIRM PSITURK TRACKS IN MILLISECONDS
expTimes<-((unique(d$expTime,na.rm=TRUE)/1000)/60)
hist(expTimes,main="Experiment Time (in minutes)",breaks=50,xlim=c(0,120))
fewTrials
#Survey responses
dsurvey<-d %>%
group_by(uniqueid) %>%
summarise(engagement=unique(engagement),
difficulty=unique(difficulty),
length=unique(length),
design=unique(design),
gender=unique(gender),
interest=unique(interest))
dsurvey<-dsurvey[!(is.na(dsurvey$gender)|dsurvey$gender==""),]
dsurvey
#Removing participants who gambled too much/not enough
dgamble0<-filter(d,gambleDelay!=0,Trialid!=75|86)
dBehavioralTotal<-dgamble0 %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
ignoredTrials=sum(ignoreRT!=0),
successTrials=sum(response=="success"),
percentageGambled=round(gambleCount/trials*100),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'))
head(dBehavioralTotal)
#Overall preference for gambling
hist(dBehavioralTotal$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall participant propensity(everyone) to gamble; n =",toString(sum(dBehavioralTotal$trials)),"trials;",nParticipants,"participants"),xlab="Percentage of time gambled")
dlowg<-filter(dBehavioralTotal,percentageGambled<9)
noGamblers<-dlowg$uniqueid
dhighg<-filter(dBehavioralTotal,percentageGambled>95)
allGamblers<-dhighg$uniqueid
lowTrials<-filter(dBehavioralTotal,trials<50)$uniqueid
failures<-filter(dBehavioralTotal,failedTrials>(round(15/trials*100)))$uniqueid
removeIds<-c(noGamblers,allGamblers,lowTrials,fastRTers,failures)
#Removing any subjects from dataset, using unique ids in vector removeIds
for(i in removeIds){
d<-d[!(d$uniqueid==i),]
}
#Check for catch trials
#75 should gamble; 86 should success/failOutcome; 6 catch trials
#Check for catch trials
dcatch<-filter(d,Trialid==75|Trialid==86)[,c("Trialid","response","uniqueid","gambleDelay")]
noGamblers
allGamblers
failures
#Check for catch trials
#75 should gamble; 86 should success/failOutcome; 6 catch trials
#Check for catch trials
dcatch<-filter(d,Trialid==75|Trialid==86)[,c("Trialid","response","uniqueid","gambleDelay")]
dcatchfinish<-filter(dcatch,Trialid==86,response=="gamble")
#Differential analysis of failCatch
#Called what they SHOULD do
dcatchidFinish<-dcatch[dcatch$Trialid==86,] %>%
group_by(uniqueid) %>%
summarise(FailTrials=sum(response=="gamble"))
imp<-filter(dcatchidFinish,FailTrials>0)$uniqueid
dcatchgamble<-filter(dcatch,Trialid==75,response=="fail"|response=='success')
dcatchidGamble<-dcatch[dcatch$Trialid==75,] %>%
group_by(uniqueid) %>%
summarise(FailTrials=sum(response=="fail"|response=='success'|response=='earlyFail'))
ra<-filter(dcatchidGamble,FailTrials>0)$uniqueid
dcatchfail<-rbind(dcatchfinish,dcatchgamble)
dcatchscore<-data.frame(dcatchidFinish$uniqueid)
colnames(dcatchscore)[1]='uniqueid'
dcatchscore$failScore<-dcatchidFinish$FailTrials+dcatchidGamble$FailTrials
failCatchId<-unique(dcatchscore$uniqueid[dcatchscore$failScore>0])
catchSuccessId<-unique(dcatchscore$uniqueid[dcatchscore$failScore==0])
#Breaking down catchTrials by severity
fail1<-unique(dcatchscore$uniqueid[dcatchscore$failScore==1])
fail2<-unique(dcatchscore$uniqueid[dcatchscore$failScore==2])
fail3<-unique(dcatchscore$uniqueid[dcatchscore$failScore==3])
fail4<-unique(dcatchscore$uniqueid[dcatchscore$failScore==4])
fail5<-unique(dcatchscore$uniqueid[dcatchscore$failScore==5])
fail6<-unique(dcatchscore$uniqueid[dcatchscore$failScore==6])
#Now this is refined number of participants
nParticipants<- length(unique(d$uniqueid))
Participants<-unique(d$uniqueid)
d$failedTrials<-NULL
d2=d[0,]
#Adding d column of number of failed trials
for (i in Participants){
dsub<-filter(d,uniqueid==i)
if(is.element(unique(dsub$uniqueid),fail1)){
dsub$failedTrials<-1
}else if(is.element(unique(dsub$uniqueid),fail2)){
dsub$failedTrials<-2
}else if(is.element(unique(dsub$uniqueid),fail3)){
dsub$failedTrials<-3
}else if(is.element(unique(dsub$uniqueid),fail4)){
dsub$failedTrials<-4
}else if(is.element(unique(dsub$uniqueid),fail5)){
dsub$failedTrials<-5
}else if(is.element(unique(dsub$uniqueid),fail6)){
dsub$failedTrials<-6
}else{
dsub$failedTrials<-0
}
d2<-rbind(d2,dsub)
}
d<-d2
#Now this is refined number of participants
nParticipants<- length(unique(d$uniqueid))
Participants<-unique(d$uniqueid)
nParticipants
Participants
#######################################################################################################
#Clearing pictures
graphics.off()
#Behavioral analyses
dgamble<-filter(d,gambleDelay!=0,oddsCond!="catch")
dBehavioral<-dgamble %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
ignoredTrials=sum(ignoreRT!=0),
successTrials=sum(response=="success"),
percentageGambled=round(gambleCount/trials*100),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'))
dBehavioral
hist(dBehavioral$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall propensity to gamble; n =",toString(nrow(dgamble[dgamble$gambleDelay!=0,]))," possible trials;",nParticipants,"subj"),xlab="Percentage of time gambled",col='red')
boxplot(dBehavioral$percentageGambled,ylim=c(0,100),main=paste("Distribution of gambling percentages across everyone; mean G % = ",toString(mean(dBehavioral$percentageGambled))),ylab="Percentage gambled (per participant)")
#Adding propensity to gamble and propensity to press as possible predictors
d$basePercentageGambled<-NULL
d2=d[0,]
#Adding d column of number of failed trials
for (i in Participants){
dsub<-filter(d,uniqueid==i)
tempdb<-filter(dBehavioral,uniqueid==i)
dsub$basePercentageGambled<-tempdb$percentageGambled
d2<-rbind(d2,dsub)
}
d<-d2
#Remaking behavioral histograms
#Whenever they ignored -RTIgnore
ignoreRTs<-dgamble$ignoreRT[dgamble$ignoreRT!=0]
hist(ignoreRTs,main=paste("Aggregated ignore RTs; ",toString(sum(dBehavioral$ignoredTrials)),"trials ignored"),breaks=90,xlim=c(0,1700))
#Whenever they gambled -RTGamble
gambleRTs<-dgamble$gambleRT[dgamble$gambleRT!=0]
hist(gambleRTs,main=paste("Aggregated gamble RTs; ",toString(sum(dBehavioral$gambleCount)),"trials gambled"),breaks=110,xlim=c(0,1700))
#Whenever they  ignored and claimed guaranteed reward
outcomeRTs<-dgamble$outcomeRT[dgamble$outcomeRT!=0]
hist(outcomeRTs,main=paste("Aggregated outcome RTs; ",toString(length(outcomeRTs)),"trials accepted sure thing"),breaks=150,xlim=c(0,700))
#Histogram of RTs and t test
hist(ignoreRTs,col=rgb(0,0,1,0.5), main='Reaction Times at gamble time', xlab='Reaction Time (ms)',breaks=70,xlim=c(0,1500))
abline(v=median(ignoreRTs),col="blue",lwd=2)
hist(gambleRTs,col=rgb(1,0,0,0.5), add=T,breaks=70)
abline(v=median(gambleRTs),col="red",lwd=2)
legend(200,15,cex=.7, bty = "n",legend=c("IgnoreRTs","GambleRTs"),col=c("blue","red"),title="",pch=15)
t.test((1/ignoreRTs),(1/gambleRTs))
#Number of gambled trials per participant
dTrials<-dgamble %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
ignoredTrials=sum(ignoreRT!=0),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
percentageIgnored=round(ignoredTrials/ntrials*100))
head(dTrials)
#dTrials
hist(dTrials$ntrials,breaks=50,xlim=c(0,140),main=paste("Number of trials per participant; ",nParticipants,"participants"),xlab="Number of Trials per participant")
#Looking at trialType breakdown
dtrialType<-dgamble %>%
group_by(binsTime,trialType) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
ignoredTrials=sum(ignoreRT!=0),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
percentageIgnored=round(ignoredTrials/ntrials*100))
head(dtrialType)
#Statistics
#Resetting dgamble
dgamble<-filter(d,gambleDelay!=0,Trialid!=75,Trialid!=86)
#Logistic regression models to predict gambled
#Recoding
dgamble$contOdds<-recode(dgamble$oddsCond,lowp=1,midp=2,highp=3)
dgamble$contMag<-recode(dgamble$magCond,low=1,mid=2,high=3)
#Need to figure out which one to use
mlog<-glm(gambled~contOdds,
data=dgamble,family="binomial");
summary(mlog)
mlog2<-glm(gambled~gambleDelay*contOdds+trialNumber+contMag+contMag:gambleDelay,
data=dgamble,family="binomial");
summary(mlog2)
library(lme4)
mlmerog<-glmer(gambled~scale(contOdds)+(scale(gambleDelay)+contOdds|uniqueid),
data=dgamble,family="binomial");
mlmerog2<-glmer(gambled~scale(contOdds)+scale(gambleDelay)*scale(contOdds)+scale(basePercentageGambled):scale(gambleDelay)+
scale(gamblePrevTrial)+scale(contMag)+scale(contMag):scale(gambleDelay)+scale(failedTrials)+
scale(failedTrials):scale(gambleDelay)+as.factor(trialType)+scale(trialNumber)+scale(trialNumber):scale(gambleDelay)+
(scale(gambleDelay)+scale(contMag)+scale(trialNumber)+scale(trialNumber):scale(gambleDelay)+
scale(contOdds)+1|uniqueid),
data=dgamble,family="binomial");
summary(mlmerog2)
##Total data
c("Number of trials that they gambled on: ",length(dgamble$response[dgamble$response=='gamble']))
c("Number of trials that they had the chance to gamble on: ",length(dgamble$response))
#By GambleDelay
d2<-filter(dgamble) %>%
group_by(binsTime) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
ignoredTrials=sum(ignoreRT!=0),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
percentageIgnored=round(ignoredTrials/ntrials*100))
d2$seconds<-d2$binsTime
d2=filter(d2,binsTime!=0)
d2
#Interesting plot of gambleDelay vs propensity to gamble.
#Andrew1
plot(d2$seconds,d2$percentageGambled,xlim = c(0,4),ylim = c(0,100),
main=paste("Total group data; Gamble propensity; n =",toString(sum(d2$ntrials)),
"trials;",toString(length(Participants)),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
abline(lm(d2$percentageGambled~d2$seconds))
gamblePlot(d,orig=T,eb='sem',ylimit=c(35,55))
