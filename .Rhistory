summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsScore<-mean(d5behavioralHigh$percentageGambled)-mean(d5behavioralLow$percentageGambled)
return(oddsScore)
}
#EV sensitivity early mid and late within subject
compMeans<-c(oddsScoreMean(d5,int='early'),oddsScoreMean(d5,int='mid'),oddsScoreMean(d5,int='late'))
compSds<-c(oddsScoreEb(d5,type='sem',int='early'),oddsScoreEb(d5,type='sem',int='mid'),oddsScoreEb(d5,type='sem',int='late'))
compsds
compSds
#Breaking down by subFilter to get Odds score and mag score
data<-filter(data,gambleDelay!=0)
d5high<-filter(data,Trialid==31|Trialid==32|Trialid==34|Trialid==35|Trialid==38|Trialid==39)
d5low<-filter(data,Trialid==21|Trialid==22|Trialid==24|Trialid==25|Trialid==28|Trialid==29)
d5behavioralHigh<-d5high %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d5behavioralLow<-d5low %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
gambledTotal<-c(d5behavioralHigh$percentageGambled,d5behavioralHigh$percentageGambled)
if(type=='sd'){
eb=sd(gambledTotal)
}
else if (type=='sem'){
eb=std.error(gambledTotal)
}
type='sem'
if(type=='sd'){
eb=sd(gambledTotal)
}
else if (type=='sem'){
eb=std.error(gambledTotal)
}
eb
#EV sensitivity early mid and late within subject
compMeans<-c(oddsScoreMean(d5,int='early'),oddsScoreMean(d5,int='mid'),oddsScoreMean(d5,int='late'))
compSds<-c(oddsScoreEb(d5,type='sem',int='early'),oddsScoreEb(d5,type='sem',int='mid'),oddsScoreEb(d5,type='sem',int='late'))
pg9<-barplot(compMeans,names.arg = c("Early","Mid","Late"),ylim=c(0,80),
ylab="Proportion of high value trials - low value trials",main="Expected Value Sensitivity; When interruption happened ; all data")
arrows(pg9,compMeans-compSds,pg9,compMeans+compSds,lwd=2,angle=90,code=3)
d5=dgamble
#EV sensitivity early mid and late within subject
compMeans<-c(oddsScoreMean(d5,int='early'),oddsScoreMean(d5,int='mid'),oddsScoreMean(d5,int='late'))
pg9<-barplot(compMeans,names.arg = c("Early","Mid","Late"),ylim=c(0,80),
ylab="Proportion of high value trials - low value trials",main="Expected Value Sensitivity; When interruption happened ; all data")
oddsScoreMean(d5,int='late')
int='late'
#int is when in the progress bar gambles interrupts
#Time is within participant subjects
#Breaking down by subFilter to get Odds score and mag score
data<-filter(data,gambleDelay!=0)
if(int=='early'){
data<-filter(data,binsTime<3)
}
else if(int=='mid'){
data<-filter(data,binsTime>3&binsTime<5)
}
if(int=='early'){
data<-filter(data,binsTime<3)
} else if(int=='mid'){
data<-filter(data,binsTime>3&binsTime<5)
} else if(int=='late'){
data<-filter(data,binsTime>5)
}
if(int=='early'){
data<-filter(data,binsTime<3)
}else if(int=='mid'){
data<-filter(data,binsTime>3&binsTime<5)
}else if(int=='late'){
data<-filter(data,binsTime>5)
}
if(time=='early'){
data<-filter(data,binsTime<1)
}else if(time=='mid'){
data<-filter(data,binsTime>1&binsTime<3)
}else if(time=='late'){
data<-filter(data,binsTime>3)
}
if(time=='early'){
data<-filter(data,binsTime<1)
}else if(time=='mid'){
data<-filter(data,binsTime>1&binsTime<3)
}else if(time=='late'){
data<-filter(data,binsTime>3)
}
time'early'
time='early'
if(time=='early'){
data=filter(data,trialNumber<46)
}else if(time=='mid'){
data=filter(data,trialNumber>45&trialNumber<93)
}else if(time=='late'){
data=filter(data,trialNumber>93)
}
oddsScoreEb<-function(data,type=NULL,int="",time=""){
#Breaking down by subFilter to get Odds score and mag score
data<-filter(data,gambleDelay!=0)
if(int=='early'){
data<-filter(data,binsTime<3)
}else if(int=='mid'){
data<-filter(data,binsTime>3&binsTime<5)
}else if(int=='late'){
data<-filter(data,binsTime>5)
}
if(time=='early'){
data<-filter(data,binsTime<1)
}else if(time=='mid'){
data<-filter(data,binsTime>1&binsTime<3)
}else if(time=='late'){
data<-filter(data,binsTime>3)
}
if(time=='early'){
data=filter(data,trialNumber<46)
}else if(time=='mid'){
data=filter(data,trialNumber>45&trialNumber<93)
}else if(time=='late'){
data=filter(data,trialNumber>93)
}
d5high<-filter(data,Trialid==31|Trialid==32|Trialid==34|Trialid==35|Trialid==38|Trialid==39)
d5low<-filter(data,Trialid==21|Trialid==22|Trialid==24|Trialid==25|Trialid==28|Trialid==29)
d5behavioralHigh<-d5high %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d5behavioralLow<-d5low %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
gambledTotal<-c(d5behavioralHigh$percentageGambled,d5behavioralHigh$percentageGambled)
if(type=='sd'){
eb=sd(gambledTotal)
}
else if (type=='sem'){
eb=std.error(gambledTotal)
}
return(eb)
}
oddsScoreMean<-function(data,int="",time=""){
#int is when in the progress bar gambles interrupts
#Time is within participant subjects
#Breaking down by subFilter to get Odds score and mag score
data<-filter(data,gambleDelay!=0)
if(int=='early'){
data<-filter(data,binsTime<3)
} else if(int=='mid'){
data<-filter(data,binsTime>3&binsTime<5)
} else if(int=='late'){
data<-filter(data,binsTime>5)
}
if(time=='early'){
data=filter(data,trialNumber<46)
}else if(time=='mid'){
data=filter(data,trialNumber>45&trialNumber<93)
}else if(time=='late'){
data=filter(data,trialNumber>93)
}
d5high<-filter(data,Trialid==31|Trialid==32|Trialid==34|Trialid==35|Trialid==38|Trialid==39)
d5low<-filter(data,Trialid==21|Trialid==22|Trialid==24|Trialid==25|Trialid==28|Trialid==29)
d5behavioralHigh<-d5high %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d5behavioralLow<-d5low %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsScore<-mean(d5behavioralHigh$percentageGambled)-mean(d5behavioralLow$percentageGambled)
return(oddsScore)
}
#EV sensitivity early mid and late within subject
compMeans<-c(oddsScoreMean(d5,int='early'),oddsScoreMean(d5,int='mid'),oddsScoreMean(d5,int='late'))
compSds<-c(oddsScoreEb(d5,type='sem',int='early'),oddsScoreEb(d5,type='sem',int='mid'),oddsScoreEb(d5,type='sem',int='late'))
pg9<-barplot(compMeans,names.arg = c("Early","Mid","Late"),ylim=c(0,80),
ylab="Proportion of high value trials - low value trials",main="Expected Value Sensitivity; When interruption happened ; all data")
arrows(pg9,compMeans-compSds,pg9,compMeans+compSds,lwd=2,angle=90,code=3)
oddsScoreMean(d5,time='late')
#Where did gambles interrupt
hist(d$gambleDelay,breaks=50,xlim=c(0,8),main="When did gambles interrupt the progress bar?",xlab="Seconds into trial gamble appeared",col='black',ylab="Total number of trials")
min[d$gambleDelay[d$gambleDelay>0]]
min(d$gambleDelay[d$gambleDelay>0])
max(d$gambleDelay[d$gambleDelay>0])
oddsScoreMean<-function(data,int="",time=""){
#int is when in the progress bar gambles interrupts
#Time is within participant subjects
#Breaking down by subFilter to get Odds score and mag score
data<-filter(data,gambleDelay!=0)
if(int=='early'){
data<-filter(data,binsTime<1.5)
} else if(int=='mid'){
data<-filter(data,binsTime>1.5&binsTime<2.5)
} else if(int=='late'){
data<-filter(data,binsTime>2.5)
}
if(time=='early'){
data=filter(data,trialNumber<46)
}else if(time=='mid'){
data=filter(data,trialNumber>45&trialNumber<93)
}else if(time=='late'){
data=filter(data,trialNumber>93)
}
d5high<-filter(data,Trialid==31|Trialid==32|Trialid==34|Trialid==35|Trialid==38|Trialid==39)
d5low<-filter(data,Trialid==21|Trialid==22|Trialid==24|Trialid==25|Trialid==28|Trialid==29)
d5behavioralHigh<-d5high %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d5behavioralLow<-d5low %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsScore<-mean(d5behavioralHigh$percentageGambled)-mean(d5behavioralLow$percentageGambled)
return(oddsScore)
}
oddsScoreEb<-function(data,type=NULL,int="",time=""){
#Breaking down by subFilter to get Odds score and mag score
data<-filter(data,gambleDelay!=0)
if(int=='early'){
data<-filter(data,binsTime<1.5)
}else if(int=='mid'){
data<-filter(data,binsTime>1.5&binsTime<2.5)
}else if(int=='late'){
data<-filter(data,binsTime>3.5)
}
if(time=='early'){
data<-filter(data,binsTime<1)
}else if(time=='mid'){
data<-filter(data,binsTime>1&binsTime<3)
}else if(time=='late'){
data<-filter(data,binsTime>3)
}
if(time=='early'){
data=filter(data,trialNumber<46)
}else if(time=='mid'){
data=filter(data,trialNumber>45&trialNumber<93)
}else if(time=='late'){
data=filter(data,trialNumber>93)
}
d5high<-filter(data,Trialid==31|Trialid==32|Trialid==34|Trialid==35|Trialid==38|Trialid==39)
d5low<-filter(data,Trialid==21|Trialid==22|Trialid==24|Trialid==25|Trialid==28|Trialid==29)
d5behavioralHigh<-d5high %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d5behavioralLow<-d5low %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
gambledTotal<-c(d5behavioralHigh$percentageGambled,d5behavioralHigh$percentageGambled)
if(type=='sd'){
eb=sd(gambledTotal)
}
else if (type=='sem'){
eb=std.error(gambledTotal)
}
return(eb)
}
#EV sensitivity early mid and late within subject
compMeans<-c(oddsScoreMean(d5,time='early'),oddsScoreMean(d5,time='mid'),oddsScoreMean(d5,time='late'))
compSds<-c(oddsScoreEb(d5,type='sem'),oddsScoreEb(d5,type='sem'),oddsScoreEb(d5,type='sem'))
pg9<-barplot(compMeans,names.arg = c("Early","Mid","Late"),ylim=c(0,80),
ylab="Proportion of high value trials - low value trials",main="Expected Value Sensitivity; Within-session all data")
arrows(pg9,compMeans-compSds,pg9,compMeans+compSds,lwd=2,angle=90,code=3)
#EV sensitivity early mid and late
compMeans<-c(oddsScoreMean(d5,int='early'),oddsScoreMean(d5,int='mid'),oddsScoreMean(d5,int='late'))
compSds<-c(oddsScoreEb(d5,type='sem',int='early'),oddsScoreEb(d5,type='sem',int='mid'),oddsScoreEb(d5,type='sem',int='late'))
pg9<-barplot(compMeans,names.arg = c("Early","Mid","Late"),ylim=c(0,80),
ylab="Proportion of high value trials - low value trials",main="Expected Value Sensitivity; When interruption happened ; all data")
arrows(pg9,compMeans-compSds,pg9,compMeans+compSds,lwd=2,angle=90,code=3)
oddsScoreEb(d5,type='sem',int='late')
compSds<-c(oddsScoreEb(d5,type='sem',int='early'),oddsScoreEb(d5,type='sem',int='mid'),oddsScoreEb(d5,type='sem')
)
arrows(pg9,compMeans-compSds,pg9,compMeans+compSds,lwd=2,angle=90,code=3)
participants data at an indiv. level to extract useful
subj<-unique(d$uniqueid)
intN<-NULL
botN<-NULL
rtn<-NULL
oddsN<-NULL
oddsNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(oddsNtemp)[1]<-"OddsGamblingScore"
colnames(oddsNtemp)[2]<-"Participant"
magN<-NULL
magNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(magNtemp)[1]<-"MagGamblingScore"
colnames(magNtemp)[2]<-"Participant"
acf1<-NULL
acf2<-NULL
acf3<-NULL
acf4<-NULL
acf5<-NULL
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
slopeDF<-NULL
plotRT=F
plotGD=F
#Participants is default (all participants)
#If you want to run sub groups, go to bottom of script
for(i in Participants){
print(i)
dsub<-d[d$uniqueid==i,]
dsubgamble<-filter(dsub,gambleDelay!=0,Trialid!=75|86)
dsubgambled<-filter(dsub,gambleDelay!=0,Trialid!=75|86,gambleRT!=0)
dsubignored<-filter(dsub,ignoreRT!=0,gambleDelay!=0,Trialid!=75,86)
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
oddsN=rbind(oddsN,oddsNtemp)
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub[dsub$gambleDelay!=0,] %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
gamblePlot(dsub,line=T,title=paste("id#",toString(unique(dsub$uniqueid))," oddsScore: ",toString(oddsNtemp[1,1])))
# plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
#      main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
#      xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,ignoreRT!=0) %>%
group_by(binsTime) %>%
summarise(medianRT=median(ignoreRT),
sdRT=sd(ignoreRT))
d4RT$seconds<-d4RT$binsTime
if (plotRT){
totalRTPlot(dsub,line=T,title=paste("Indiv graph; Participant# ",toString(unique(dsub$uniqueid))))
# plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
#      main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
#      xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
#This is to check for gamble ramp
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0,Trialid!=75|86),family="binomial")
#This is glm for RT by gamble Delay
mtempRT<-lm(dsubgambled$gambleRT~dsubgambled$gambleDelay)
#This checks to see if any participant is gamble ramping
if(summary(mlogtemp)$coefficients[8]<.1 & summary(mlogtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's suspiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<200){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.1 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making acf coefficient vectors
acf1<-c(acf1,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[2])
acf2<-c(acf2,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[3])
acf3<-c(acf3,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[4])
acf4<-c(acf4,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[5])
acf5<-c(acf5,acf(dsub$gambled,lag.max=5,plot = FALSE)$acf[6])
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mlogtemp)$coefficients[2])
run<-c(run,i)
}
slopeDF<-data.frame(cbind(run,rtSlopes,gambleSlopes))
a<-oddsN[order(oddsN$OddsGamblingScore),]
#oddsN is the median split of people who respond well to odds
oddsN<-as.integer(a$Participant[(length(a$Participant)/2):length(a$Participant)])
#Quartile split
oddsN<-oddsNtable[(length(oddsNtable)/2):(length(oddsNtable))]
#illogical Gamblers
reverseOddsN<-as.integer(a[1:(nrow(a)/4),]$Participant)
par(bty='n')
box(which="plot",lty='solid')
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='Individual Gamble slopes (% change/second)',ylab='Individual RT Slopes (ms/second)',pch=16,cex=0.8,main=paste('Gamble slopes vs. RT slopes; n=',nrow(slopeDF)),xlim=c(-.7,.7),ylim=c(-80,50),bty='7')
abline(v=0,col="black")
abline(h=0,col="black")
with(slopeDF, text(slopeDF$rtSlopes~slopeDF$gambleSlopes, labels = slopeDF$run,cex=.8), pos = 2)
par(bty='n')
box(which="plot",lty='solid')
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='Individual Gamble slopes (% change/second)',ylab='Individual RT Slopes (ms/second)',pch=16,cex=0.8,main=paste('Gamble slopes vs. RT slopes; n=',nrow(slopeDF)),xlim=c(-.7,.7),ylim=c(-80,50),bty='7')
abline(v=0,col="black")
abline(h=0,col="black")
#Statistics
#Resetting dgamble
dgamble<-filter(d,gambleDelay!=0,Trialid!=75,Trialid!=86)
mlmerog2<-glmer(gambled~scale(contOdds)+scale(gambleDelay)*scale(contOdds)+scale(basePercentageGambled):scale(gambleDelay)+
scale(gamblePrevTrial)+scale(contMag)+scale(contMag):scale(gambleDelay)+scale(failedTrials)+
scale(failedTrials):scale(gambleDelay)+as.factor(trialType)+scale(trialNumber)+scale(trialNumber):scale(gambleDelay)+
(scale(gambleDelay)+scale(contMag)+scale(trialNumber)+scale(trialNumber):scale(gambleDelay)+
scale(contOdds)+1|uniqueid),
data=dgamble,family="binomial");
library(lme4)
mlmerog2<-glmer(gambled~scale(contOdds)+scale(gambleDelay)*scale(contOdds)+scale(basePercentageGambled):scale(gambleDelay)+
scale(gamblePrevTrial)+scale(contMag)+scale(contMag):scale(gambleDelay)+scale(failedTrials)+
scale(failedTrials):scale(gambleDelay)+as.factor(trialType)+scale(trialNumber)+scale(trialNumber):scale(gambleDelay)+
(scale(gambleDelay)+scale(contMag)+scale(trialNumber)+scale(trialNumber):scale(gambleDelay)+
scale(contOdds)+1|uniqueid),
data=dgamble,family="binomial");
#Logistic regression models to predict gambled
#Recoding
dgamble$contOdds<-recode(dgamble$oddsCond,lowp=1,midp=2,highp=3)
dgamble$contMag<-recode(dgamble$magCond,low=1,mid=2,high=3)
mlmerog2<-glmer(gambled~scale(contOdds)+scale(gambleDelay)*scale(contOdds)+scale(basePercentageGambled):scale(gambleDelay)+
scale(gamblePrevTrial)+scale(contMag)+scale(contMag):scale(gambleDelay)+scale(failedTrials)+
scale(failedTrials):scale(gambleDelay)+as.factor(trialType)+scale(trialNumber)+scale(trialNumber):scale(gambleDelay)+
(scale(gambleDelay)+scale(contMag)+scale(trialNumber)+scale(trialNumber):scale(gambleDelay)+
scale(contOdds)+1|uniqueid),
data=dgamble,family="binomial");
summary(mlmerog2)
summary(mlmerog2)
#Low mag
dlow<-filter(dgamble,standardGamble==1|standardGamble==2)
c("Number of trials that they ignored: ",length(dlow$ignoreRT[dlow$ignoreRT!=0]))
c("Number of trials that they had the chance to gamble on: ",length(dlow$gambleDelay))
#By uniqueId
dBehavioralLow<-dlow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
dBehavioralLow
#How much did each participant choose to gamble
hist(dBehavioralLow$percentageGambled,breaks=50,ylim=c(0,50),xlim=c(-5,100),main=paste("Propensity to gamble on low-mag gambles; n =",toString(sum(dBehavioralLow$trials))," possible trials;",nParticipants,"participants"),xlab="Percentage of time gambled",col='red')
gamblePlot(dlow,orig=F,eb='sem',ylimit=c(0,100))
gamblePlot(dlow,orig=T,eb='sem',ylimit=c(30,50))
totalRTPlot(dlow,line=T,ylimit=c(700,1200),title="low mag trials only")
#Histogram of RTs and t test
hist(dlow$ignoreRT[dlow$ignoreRT!=0],col=rgb(0,0,1,0.5), main='Reaction Times at gamble time low mag only', xlab='Reaction Time (ms)',breaks=70,xlim=c(0,1500))
abline(v=median(ignoreRTs),col="blue",lwd=2)
hist(dlow$gambleRT[dlow$gambleRT!=0],col=rgb(1,0,0,0.5), add=T,breaks=70)
abline(v=median(gambleRTs),col="red",lwd=2)
legend(200,10,cex=.7, bty = "n",legend=c("IgnoreRTs","GambleRTs"),col=c("blue","red"),title="",pch=15)
#Histogram of RTs and t test
hist(dlow$ignoreRT[dlow$ignoreRT!=0],col=rgb(0,0,1,0.5), main='Reaction Times at gamble time low mag only', xlab='Reaction Time (ms)',breaks=70,xlim=c(0,1500))
abline(v=median(gambleRTs),col="red",lwd=2)
abline(v=median(dlow$ignoreRT[dlow$ignoreRT!=0]),col="blue",lwd=2)
hist(dlow$gambleRT[dlow$gambleRT!=0],col=rgb(1,0,0,0.5), add=T,breaks=70)
abline(v=median(dlow$gambleRT[dlow$gambleRT!=0]),col="red",lwd=2)
#Histogram of RTs and t test
hist(dlow$ignoreRT[dlow$ignoreRT!=0],col=rgb(0,0,1,0.5), main='Reaction Times at gamble time low mag only', xlab='Reaction Time (ms)',breaks=70,xlim=c(0,1500))
abline(v=median(dlow$ignoreRT[dlow$ignoreRT!=0]),col="blue",lwd=2)
hist(dlow$gambleRT[dlow$gambleRT!=0],col=rgb(1,0,0,0.5), add=T,breaks=70)
abline(v=median(dlow$gambleRT[dlow$gambleRT!=0]),col="red",lwd=2)
legend(200,10,cex=.7, bty = "n",legend=c("IgnoreRTs","GambleRTs"),col=c("blue","red"),title="",pch=15)
##Mid mag
dmid<-filter(dgamble,standardGamble==4|standardGamble==5)
c("Number of trials that they ignored: ",length(dmid$ignoreRT[dmid$ignoreRT!=0]))
c("Number of trials that they had the chance to gamble on: ",length(dmid$gambleDelay))
#By uniqueId
dBehavioralMid<-dmid %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
#How much did each participant choose to gamble
hist(dBehavioralMid$percentageGambled,breaks=50,ylim=c(0,50),xlim=c(-5,100),col='red',main=paste("Propensity to gamble on mid-mag gambles; n =",toString(sum(dBehavioralMid$trials)),"possible trials;",toString(length(dBehavioralMid$uniqueid)),"participants"),xlab="Percentage of time gambled")
