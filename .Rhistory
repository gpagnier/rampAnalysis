group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(meanRT=mean(gambleRT),
sdRT=sd(gambleRT))
d4RT$seconds<-d4RT$binsTime
if (plotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
mtemp<-lm(d4$percentageGambled~d4$seconds)
tempRTdf<-filter(dsub,gambleRT!=0)
mtempRT<-lm(tempRTdf$gambleRT~tempRTdf$gambleDelay)
#This checks to see if any participant is ramping
if(summary(mtemp)$coefficients[8]<.05 & summary(mtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's susupiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<250){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.1 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mtemp)$coefficients[2])
run<-c(run,i)
}
slopeDF<-cbind(run,rtSlopes,gambleSlopes)
head(slopeDF)
plot(slopeDF$gambleSlopes~slopeDF$rtSlopes,xlab='rtSlopes',ylab='gambleSlopes',main='All Participants (n=112)',xlim=c(-70,50))
slopeDF<-data.frame(cbind(run,rtSlopes,gambleSlopes))
slopeDF
plot(slopeDF$gambleSlopes~slopeDF$rtSlopes,xlab='rtSlopes',ylab='gambleSlopes',main='All Participants (n=112)',xlim=c(-70,50))
with(slopeDF, text(slopeDF$gambleSlopes~slopeDF$rtSlopes, labels = slopeDF$run,cex=.8), pos = 2)
m1<-lm(slopeDF$gambleSlopes~slopeDF$rtSlopes)
abline(m1)
plot(slopeDF$gambleSlopes~slopeDF$rtSlopes,xlab='rtSlopes',ylab='gambleSlopes',main='All Participants (n=112)',xlim=c(-70,50))
m1<-lm(slopeDF$gambleSlopes~slopeDF$rtSlopes)
abline(m1)
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='gambleSlopes',ylab='rtSlopes',main='All Participants (n=112)')
m1<-lm(slopeDF$rtSlopes~slopeDF$gambleSlopes)
abline(m1)
cor(slopeDF$rtSlopes~slopeDF$gambleSlopes)
summary(m1)
cor(slopeDF$rtSlopes~slopeDF$gambleSlopes)
cor(slopeDF$rtSlopes~slopeDF$gambleSlopes)*cor(slopeDF$rtSlopes~slopeDF$gambleSlopes)
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='gambleSlopes',ylab='rtSlopes',main='All Participants (n=112)',xlim=c(-10,15),ylim=c(-90,40))
splotRT=FALSE
splotGD=TRUE
soddsN=NULL
smagN=NULL
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
slopeDF<-NULL
for(i in rtn){
print(i)
dsub<-d[d$uniqueid==i,]
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter to get OddsScore
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
soddsN=rbind(soddsN,oddsNtemp)
#Breaking down by subFilter to get MagScore
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
smagN=rbind(smagN,magNtemp)
#Breaking down subdf by gambleDelay
d4<-dsub %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (splotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(meanRT=mean(gambleRT),
sdRT=sd(gambleRT))
d4RT$seconds<-d4RT$binsTime
if (splotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
mtemp<-lm(d4$percentageGambled~d4$seconds)
tempRTdf<-filter(dsub,gambleRT!=0)
mtempRT<-lm(tempRTdf$gambleRT~tempRTdf$gambleDelay)
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mtemp)$coefficients[2])
run<-c(run,i)
}
slopeDF<-data.frame(cbind(run,rtSlopes,gambleSlopes))
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='gambleSlopes',ylab='rtSlopes',main='Subgroup of RT Rampers (n=33)',xlim=c(-10,15),ylim=c(-90,40))
abline(m1)
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='gambleSlopes',ylab='rtSlopes',main='Subgroup of RT Rampers (n=33)',xlim=c(-10,15),ylim=c(-90,40))
m1<-lm(slopeDF$rtSlopes~slopeDF$gambleSlopes)
abline(m1)
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='gambleSlopes',ylab='rtSlopes',main='All Participants (n=112)',xlim=c(-10,15),ylim=c(-90,40))
subj<-unique(d$uniqueid)
intN<-NULL
botN<-NULL
rtn<-NULL
oddsN<-NULL
oddsNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(oddsNtemp)[1]<-"OddsGamblingScore"
colnames(oddsNtemp)[2]<-"Participant"
magN<-NULL
magNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(magNtemp)[1]<-"MagGamblingScore"
colnames(magNtemp)[2]<-"Participant"
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
slopeDF<-NULL
plotRT=FALSE
plotGD=FALSE
#Participants is default (all participants)
#If you want to run sub groups, go to bottom of script
for(i in Participants){
print(i)
dsub<-d[d$uniqueid==i,]
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
oddsN=rbind(oddsN,oddsNtemp)
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(meanRT=mean(gambleRT),
sdRT=sd(gambleRT))
d4RT$seconds<-d4RT$binsTime
if (plotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
mtemp<-lm(d4$percentageGambled~d4$seconds)
tempRTdf<-filter(dsub,gambleRT!=0)
mtempRT<-lm(tempRTdf$gambleRT~tempRTdf$gambleDelay)
#This checks to see if any participant is ramping
if(summary(mtemp)$coefficients[8]<.05 & summary(mtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's susupiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<250){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.1 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mtemp)$coefficients[2])
run<-c(run,i)
}
slopeDF<-data.frame(cbind(run,rtSlopes,gambleSlopes))
intN=c(intN,375,360,296,287,272,237)
a<-oddsN[order(oddsN$OddsGamblingScore),]
oddsN<-as.integer(a$Participant[82:112])
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='gambleSlopes',ylab='rtSlopes',main='All Participants (n=112)',xlim=c(-10,15),ylim=c(-90,40))
abline(m1)
m1<-lm(slopeDF$rtSlopes~slopeDF$gambleSlopes)
abline(m1)
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='gambleSlopes',ylab='rtSlopes',main='All Participants (n=112)',xlim=c(-10,15),ylim=c(-90,40))
abline(m1)
with(slopeDF, text(slopeDF$rtSlopes~slopeDF$gambleSlopes, labels = slopeDF$run,cex=.8), pos = 2)
####The following is to just get one participant's data
p=256
dsub<-d[d$uniqueid==p,]
d3<-dsub %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
par(ps = 12, cex = 1, cex.main = 1)
d3$seconds<-d3$binsTime
plot(d3$seconds,d3$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data (all trials); n =",toString(sum(d3$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled")
mtemp<-lm(d3$percentageGambled~d3$seconds)
summary(mtemp)
#One participant RT
d3RT<-filter(dsub,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(meanRT=mean(gambleRT),
sdRT=sd(gambleRT))
d3RT$seconds<-d3RT$binsTime
plot(d3RT$seconds,d3RT$meanRT,xlim = c(0,8),ylim=c(200,1500),main=paste("All gambles; Reaction time with sd; n =",toString(sum(d3$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
for(i in 1:length(d3RT$seconds)){
arrows(as.numeric(d3RT$seconds[i]),as.numeric(d3RT[i,2]+(as.numeric(d3RT[i,3]))),as.numeric(d3RT$seconds[i]),as.numeric(d3RT[i,2]-(as.numeric(d3RT[i,3]))),length=0.05, angle=90, code=3)
}
splotRT=FALSE
splotGD=TRUE
soddsN=NULL
smagN=NULL
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
slopeDF<-NULL
rtn
rtn<-c(rtn,256)
for(i in rtn){
print(i)
dsub<-d[d$uniqueid==i,]
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter to get OddsScore
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
soddsN=rbind(soddsN,oddsNtemp)
#Breaking down by subFilter to get MagScore
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
smagN=rbind(smagN,magNtemp)
#Breaking down subdf by gambleDelay
d4<-dsub %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (splotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(meanRT=mean(gambleRT),
sdRT=sd(gambleRT))
d4RT$seconds<-d4RT$binsTime
if (splotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
mtemp<-lm(d4$percentageGambled~d4$seconds)
tempRTdf<-filter(dsub,gambleRT!=0)
mtempRT<-lm(tempRTdf$gambleRT~tempRTdf$gambleDelay)
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mtemp)$coefficients[2])
run<-c(run,i)
}
slopeDF<-data.frame(cbind(run,rtSlopes,gambleSlopes))
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='gambleSlopes',ylab='rtSlopes',main='Subgroup of RT Rampers (n=34)',xlim=c(-10,15),ylim=c(-90,40))
m1<-lm(slopeDF$rtSlopes~slopeDF$gambleSlopes)
abline(m1)
cor(slopeDF$rtSlopes~slopeDF$gambleSlopes)
cor(slopeDF$rtSlopes~slopeDF$gambleSlopes)*cor(slopeDF$rtSlopes~slopeDF$gambleSlopes)
plot(slopeDF$gambleSlopes~slopeDF$rtSlopes,xlab='rtSlopes',ylab='gambleSlopes',main='Subgroup of RT Rampers (n=33)',xlim=c(-70,50))
plot(slopeDF$gambleSlopes~slopeDF$rtSlopes,xlab='rtSlopes',ylab='gambleSlopes',main='Subgroup of RT Rampers (n=33)',xlim=c(-90,40),ylim=c(-10,15))
m1<-lm(slopeDF$gambleSlopes~slopeDF$rtSlopes)
abline(m1)
plot(slopeDF$gambleSlopes~slopeDF$rtSlopes,xlab='rtSlopes',ylab='gambleSlopes',main='Subgroup of RT Rampers (n=34)',xlim=c(-90,40),ylim=c(-10,15))
with(slopeDF, text(slopeDF$gambleSlopes~slopeDF$rtSlopes, labels = slopeDF$run,cex=.8), pos = 2)
plot(slopeDF$gambleSlopes~slopeDF$rtSlopes,xlab='rtSlopes',ylab='gambleSlopes',main='Subgroup of RT Rampers (n=34)',xlim=c(-90,40),ylim=c(-10,15))
m1<-lm(slopeDF$gambleSlopes~slopeDF$rtSlopes)
abline(m1)
subj<-unique(d$uniqueid)
intN<-NULL
botN<-NULL
rtn<-NULL
oddsN<-NULL
oddsNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(oddsNtemp)[1]<-"OddsGamblingScore"
colnames(oddsNtemp)[2]<-"Participant"
magN<-NULL
magNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(magNtemp)[1]<-"MagGamblingScore"
colnames(magNtemp)[2]<-"Participant"
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
slopeDF<-NULL
plotRT=FALSE
plotGD=FALSE
#Add in knobs for different sub categories (though this number is very small....)
#Participants is default (all participants)
#If you want to run sub groups, go to bottom of script
for(i in Participants){
print(i)
dsub<-d[d$uniqueid==i,]
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
oddsN=rbind(oddsN,oddsNtemp)
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
#One participant RT
d4RT<-filter(dsub,gambleRT!=0) %>%
group_by(binsTime) %>%
summarise(meanRT=mean(gambleRT),
sdRT=sd(gambleRT))
d4RT$seconds<-d4RT$binsTime
if (plotRT){
plot(d4RT$seconds,d4RT$meanRT,xlim = c(0,8),ylim=c(400,1000),
main=paste("Individual participant RT; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
xlab="Seconds into trial",ylab="Reaction time (seconds)",pch=19)
}
mtemp<-lm(d4$percentageGambled~d4$seconds)
tempRTdf<-filter(dsub,gambleRT!=0)
mtempRT<-lm(tempRTdf$gambleRT~tempRTdf$gambleDelay)
#This checks to see if any participant is ramping
if(summary(mtemp)$coefficients[8]<.05 & summary(mtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's susupiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<250){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.1 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mtemp)$coefficients[2])
run<-c(run,i)
}
slopeDF<-data.frame(cbind(run,rtSlopes,gambleSlopes))
intN=c(intN,375,360,296,287,272,237)
a<-oddsN[order(oddsN$OddsGamblingScore),]
oddsN<-as.integer(a$Participant[82:112])
plot(slopeDF$gambleSlopes~slopeDF$rtSlopes,xlab='rtSlopes',ylab='gambleSlopes',main='All Participants (n=112)',xlim=c(-90,40),ylim=c(-10,15))
m1<-lm(slopeDF$gambleSlopes~slopeDF$rtSlopes)
abline(m1)
plot(slopeDF$gambleSlopes~slopeDF$rtSlopes,xlab='rtSlopes',ylab='gambleSlopes',main='All Participants (n=112)',xlim=c(-90,40),ylim=c(-10,15))
m1<-lm(slopeDF$gambleSlopes~slopeDF$rtSlopes)
abline(m1)
m1<-lm(slopeDF$rtSlopes~slopeDF$gambleSlopes)
abline(m1)
plot(slopeDF$rtSlopes~slopeDF$gambleSlopes,xlab='gambleSlopes',ylab='rtSlopes',main='All Participants (n=112)',xlim=c(-10,15),ylim=c(-90,40))
m1<-lm(slopeDF$rtSlopes~slopeDF$gambleSlopes)
abline(m1)
