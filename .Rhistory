sdPercentageGambled=sd(percentageGambled),
stdPercentageGambled=std.error(percentageGambled),
meanStandardizedGambled=mean(standardizedGamblingPercentage),
sdStandardizedGambled=sd(standardizedGamblingPercentage),
stdStandardizedGambled=std.error(standardizedGamblingPercentage))
if(standardized){
plot(dTestfun$seconds,dTestfun$meanStandardizedGambled,xlim = c(0,5),ylim=c(-30,0),
main=paste("Standardized Gamble Propensity",";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled (standardized per subject)",pch=19,bty='l',col=color)
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']+(as.numeric(dTestfun[i,'stdStandardizedGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']-(as.numeric(dTestfun[i,'stdStandardizedGambled']))),length=0.05, angle=90, code=3)
}
}
}else{
plot(dTestfun$seconds,dTestfun$meanPercentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}
if(line){
abline(lm(dTestfun$meanPercentageGambled~dTestfun$seconds))
}
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'stdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'stdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}else if(eb=='std'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'sdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'sdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}
}
}
gamblePlot(dlowp,title="lowValue",ylim=c(10,40),orig=F,standardized = T)
gamblePlot<-function(data,orig=TRUE,eb='',line=FALSE,ylimit=c(0,100),title="",trialType="",standardized=F){
if(trialType==""){
color="black"
data<-filter(data,gambleDelay!=0,Trialid!=75|86)
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleLeft"){
color="purple"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleLeft')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleRight"){
color="red"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleRight')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
}
d2fun$seconds<-d2fun$binsTime
if(orig){
plot(d2fun$seconds,d2fun$percentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title, "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,col=color)
if(line){
abline(lm(d2fun$percentageGambled~d2fun$seconds))
}
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}else{
d2pfun<-filter(data,gambleDelay!=0) %>%
group_by(binsTime,uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100),
baselineGambling=unique(baselineGambling),
standardizedGamblingPercentage=percentageGambled-baselineGambling)
d2pfun$seconds<-d2pfun$binsTime
dTestfun<-d2pfun %>%
group_by(seconds) %>%
summarise(meanPercentageGambled=mean(percentageGambled),
medianPercentageGambled=median(percentageGambled),
sdPercentageGambled=sd(percentageGambled),
stdPercentageGambled=std.error(percentageGambled),
meanStandardizedGambled=mean(standardizedGamblingPercentage),
sdStandardizedGambled=sd(standardizedGamblingPercentage),
stdStandardizedGambled=std.error(standardizedGamblingPercentage))
if(standardized){
plot(dTestfun$seconds,dTestfun$meanStandardizedGambled,xlim = c(0,5),ylim=c(-10,10),
main=paste("Standardized Gamble Propensity",";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled (standardized per subject)",pch=19,bty='l',col=color)
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']+(as.numeric(dTestfun[i,'stdStandardizedGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']-(as.numeric(dTestfun[i,'stdStandardizedGambled']))),length=0.05, angle=90, code=3)
}
}
}else{
plot(dTestfun$seconds,dTestfun$meanPercentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}
if(line){
abline(lm(dTestfun$meanPercentageGambled~dTestfun$seconds))
}
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'stdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'stdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}else if(eb=='std'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'sdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'sdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}
}
}
#Mid value
dmidp<-filter(d,oddsCond=='midp',gambleDelay!=0,Trialid!=75,Trialid!=86)
dmidpB<-dmidp %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
highKeys=sum(recordedNumber>20))
hist(dmidpB$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,50),main=paste("Overall participant propensity(mid value only) to gamble; n =",toString(sum(dmidpB$ntrials)),"trials;",nParticipants,"participants"),xlab="Percentage of time gambled",col='red')
gamblePlot(dmidp,title="midValue",ylim=c(30,50))
gamblePlot(dmidp,title="midValue",ylim=c(30,50),standardized = T,orig=F)
gambleRtPlot(dmidp,xlimit=c(0,5),ylimit=c(700,1000))
totalRTPlot(dmidp,title='Mid Value')
hist(d$outcomeRT[d$response=='gamble'],col=rgb(1,0,0,0.5), main='RTs when accepting sure thing (after ignoring gamble)', xlab='RT',breaks=70,xlim=c(0,1300))
abline(v=median(d$outcomeRT[d$response=='gamble']),col="red",lwd=2)
hist(dmidp$outcomeRT[dmidp$response=='gamble'],col=rgb(0,0,1,0.5), add=T,breaks=70)
abline(v=median(dmidp$outcomeRT[dmidp$response=='gamble']),col="blue",lwd=2)
legend(800,55,cex=.7, bty = "n",legend=c("All trials","midValue only"),col=c("red","blue"),title="",pch=16)
#High value
dhighp<-filter(d,oddsCond=='highp',gambleDelay!=0,Trialid!=75,Trialid!=86)
dhighpB<-dhighp %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
highKeys=sum(recordedNumber>20))
hist(dhighpB$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,50),main=paste("Overall participant propensity(high value only) to gamble; n =",toString(sum(dhighpB$ntrials)),"trials;",nParticipants,"participants"),xlab="Percentage of time gambled",col='red')
gamblePlot(dhighp,title="highValue",ylim=c(50,70))
gamblePlot(dhighp,title="highValue",ylim=c(50,900))
gamblePlot(dhighp,title="highValue",ylim=c(50,90))
gamblePlot(dhighp,title="highValue",ylim=c(40,90))
gamblePlot(dhighp,title="highValue",ylim=c(20,90))
gamblePlot(dhighp,title="highValue",ylim=c(20,100))
gamblePlot(dhighp,title="highValue",ylim=c(0,100))
gamblePlot(dhighp,title="highValue",ylim=c(40,70))
gamblePlot(dhighp,title="highValue",ylim=c(40,70),standardized = T,orig=F)
gamblePlot<-function(data,orig=TRUE,eb='',line=FALSE,ylimit=c(0,100),title="",trialType="",standardized=F){
if(trialType==""){
color="black"
data<-filter(data,gambleDelay!=0,Trialid!=75|86)
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleLeft"){
color="purple"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleLeft')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))}
else if(trialType=="gambleRight"){
color="red"
data<-filter(data,gambleDelay!=0,Trialid!=75|86,trialType=='gambleRight')
d2fun<-data %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
}
d2fun$seconds<-d2fun$binsTime
if(orig){
plot(d2fun$seconds,d2fun$percentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title, "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,col=color)
if(line){
abline(lm(d2fun$percentageGambled~d2fun$seconds))
}
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}else{
d2pfun<-filter(data,gambleDelay!=0) %>%
group_by(binsTime,uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100),
baselineGambling=unique(baselineGambling),
standardizedGamblingPercentage=percentageGambled-baselineGambling)
d2pfun$seconds<-d2pfun$binsTime
dTestfun<-d2pfun %>%
group_by(seconds) %>%
summarise(meanPercentageGambled=mean(percentageGambled),
medianPercentageGambled=median(percentageGambled),
sdPercentageGambled=sd(percentageGambled),
stdPercentageGambled=std.error(percentageGambled),
meanStandardizedGambled=mean(standardizedGamblingPercentage),
sdStandardizedGambled=sd(standardizedGamblingPercentage),
stdStandardizedGambled=std.error(standardizedGamblingPercentage))
if(standardized){
plot(dTestfun$seconds,dTestfun$meanStandardizedGambled,xlim = c(0,5),
main=paste("Standardized Gamble Propensity",";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled (standardized per subject)",pch=19,bty='l',col=color)
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']+(as.numeric(dTestfun[i,'stdStandardizedGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanStandardizedGambled']-(as.numeric(dTestfun[i,'stdStandardizedGambled']))),length=0.05, angle=90, code=3)
}
}
}else{
plot(dTestfun$seconds,dTestfun$meanPercentageGambled,xlim = c(0,4),ylim = ylimit,
main=paste("Gamble propensity",title,";", "n =",toString(length(data$response[data$response=='gamble'])),
"gambled trials;",toString(length(unique(data$uniqueid))),"participants"),
xlab="Seconds into trial",ylab="Percentage Gambled",pch=19,bty='l',col=color)
summary(lm(d2fun$percentageGambled~d2fun$seconds))
}
if(line){
abline(lm(dTestfun$meanPercentageGambled~dTestfun$seconds))
}
if(eb=='sem'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'stdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'stdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}else if(eb=='std'){
for(i in 1:length(dTestfun$seconds)){
arrows(as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']+(as.numeric(dTestfun[i,'sdPercentageGambled']))),as.numeric(dTestfun$seconds[i]),as.numeric(dTestfun[i,'meanPercentageGambled']-(as.numeric(dTestfun[i,'sdPercentageGambled']))),length=0.05, angle=90, code=3)
}
}
}
}
gamblePlot(dhighp,title="highValue",ylim=c(40,70),standardized = T,orig=F)
totalRTPlot(dhighp,title='High Value')
hist(d$outcomeRT[d$response=='gamble'],col=rgb(1,0,0,0.5), main='RTs when accepting sure thing (after ignoring gamble)', xlab='RT',breaks=70,xlim=c(0,1300))
abline(v=median(d$outcomeRT[d$response=='gamble']),col="red",lwd=2)
hist(dhighp$outcomeRT[dhighp$response=='gamble'],col=rgb(0,0,1,0.5), add=T,breaks=70)
abline(v=median(dhighp$outcomeRT[dhighp$response=='gamble']),col="blue",lwd=2)
legend(800,55,cex=.7, bty = "n",legend=c("All trials","highValue only"),col=c("red","blue"),title="",pch=16)
d5<-dgamble[dgamble$uniqueid %in% rtn,]
#By uniqueId
d5Behavioral<-d5 %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
highKeys=sum(recordedNumber>20))
#How much did each participant choose to gamble
hist(d5Behavioral$percentageGambled,breaks=50,ylim=c(0,20),xlim=c(-5,100),main=paste("Propensity to gamble; n =",toString(sum(d5Behavioral$ntrials)),"possible trials;",toString(length(unique(d5Behavioral$uniqueid))),"participants"),xlab="Percentage of time gambled")
midGamblers<-filter(dTrials,percentageGambled>40&percentageGambled<60)$uniqueid
respGamblers<-filter(dTrials,highKeys<50)$uniqueid
#Defining subgroups
dTrials<-dgamble %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
highKeys=sum(recordedNumber>20))
head(dTrials)
respGamblers<-filter(dTrials,highKeys<50)$uniqueid
midGamblers<-filter(dTrials,percentageGambled>40&percentageGambled<60)$uniqueid
d5<-dgamble[dgamble$uniqueid %in% rtn,]
d5<-dgamble[dgamble$uniqueid %in% midGamblers,] #gambled between 40 and 60
#This is if you want filters
summaryMagFilter=F
#This is if you want filters
summaryMagFilter=F
summaryMagCond='high'
summaryOddsFilter=F
summaryOddsCond='highp'
#This filters summary d5 by odds/mag if specified above via T/F
if(summaryMagFilter){
d5<-filter(d5,magCond==summaryMagCond)
}
if(summaryOddsFilter){
d5<-filter(d5,oddsCond==summaryOddsCond)
}
c("Number of trials that they gambled on:",length(d5$ignoreRT[d5$ignoreRT!=0]))
c("Number of trials that they had the chance to gamble on:",length(d5$gambleDelay))
#By uniqueId
d5Behavioral<-d5 %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
highKeys=sum(recordedNumber>20))
#How much did each participant choose to gamble
hist(d5Behavioral$percentageGambled,breaks=50,ylim=c(0,20),xlim=c(-5,100),main=paste("Propensity to gamble; n =",toString(sum(d5Behavioral$ntrials)),"possible trials;",toString(length(unique(d5Behavioral$uniqueid))),"participants"),xlab="Percentage of time gambled")
gamblePlot(d5,title="midGamblers",ylim=c(30,80),standardized = T,orig=F)
gamblePlot(d5,title="midGamblers",ylim=c(30,80),standardized = T,orig=T)
totalRTPlot(dmid,title='midGamblers')
switchPlot(d5,ylimit=c(50,300))
switchPlot(d5,ylimit=c(100,200))
switchPlot(dhighp,ylimit=c(100,200))
switchPlot(dmidp,ylimit=c(100,200))
switchPlot(dlowp,ylimit=c(100,200))
switchPlot(dhigh,ylimit=c(100,200))
switchPlot(dmid,ylimit=c(100,200))
switchPlot(dhigh,ylimit=c(100,200))
switchPlot(dmid,ylimit=c(100,200))
#Mid mag
dmid<-filter(d,magCond=='mid',gambleDelay!=0,Trialid!=75,Trialid!=86)
dmidB<-dmid %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
highKeys=sum(recordedNumber>20))
hist(dmidB$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,35),main=paste("Overall participant propensity(mid mag only) to gamble; n =",toString(sum(dmidB$ntrials)),"trials;",nParticipants,"participants"),xlab="Percentage of time gambled",col='red')
gamblePlot(dmid,title="midMag",ylim=c(30,80))
gamblePlot(dmid,title="lowMag",ylim=c(30,80),standardized = T,orig=F)
gambleRtPlot(dmid,xlimit=c(0,5),ylimit=c(800,1200))
totalRTPlot(dmid,title='Mid Mag')
switchPlot(dmid,ylimit=c(100,200))
switchPlot(dlow,ylimit=c(100,200))
############################################################################################################
############################################################################################################
#Mag/odds condition
#Removing participants who gambled too much/not enough
#Low mag
dlow<-filter(d,magCond=='low',gambleDelay!=0,Trialid!=75,Trialid!=86)
dlowB<-dlow %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
highKeys=sum(recordedNumber>20))
hist(dlowB$percentageGambled,breaks=50,xlim=c(-5,100),ylim=c(0,25),main=paste("Overall participant propensity(low mag only) to gamble; n =",toString(sum(dlowB$ntrials)),"trials;",nParticipants,"participants"),xlab="Percentage of time gambled",col='red')
gamblePlot(dlow,title="lowMag",ylim=c(30,60))
gamblePlot(dlow,title="lowMag",ylim=c(30,60),standardized = T,orig=F)
gambleRtPlot(dlow,xlimit=c(0,5),ylimit=c(700,1000))
totalRTPlot(dlow,title='Low Mag')
switchPlot(dlow,ylimit=c(100,200))
switchPlot(dlow,ylimit=c(100,200))
switchPlot(dmid,ylimit=c(100,200))
nrow(dlow)
nrow(dmid)
nrow(dhigh)
nrow(d)
View(dlow)
View(dmid)
d5<-dgamble[dgamble$uniqueid %in% respGamblers,] #not very many high keys
#This is if you want filters
summaryMagFilter=F
summaryMagCond='high'
summaryOddsFilter=F
summaryOddsCond='highp'
#This filters summary d5 by odds/mag if specified above via T/F
if(summaryMagFilter){
d5<-filter(d5,magCond==summaryMagCond)
}
if(summaryOddsFilter){
d5<-filter(d5,oddsCond==summaryOddsCond)
}
c("Number of trials that they gambled on:",length(d5$ignoreRT[d5$ignoreRT!=0]))
c("Number of trials that they had the chance to gamble on:",length(d5$gambleDelay))
#By uniqueId
d5Behavioral<-d5 %>%
group_by(uniqueid) %>%
summarise(ntrials=length(trialNumber),
gambleCount=sum(response=="gamble"),
successTrials=sum(response=='success'),
failedTrials=sum(response=='fail'|response=='failOutcome'|response=='earlyFail'),
percentageGambled=round(gambleCount/ntrials*100),
highKeys=sum(recordedNumber>20))
#How much did each participant choose to gamble
hist(d5Behavioral$percentageGambled,breaks=50,ylim=c(0,20),xlim=c(-5,100),main=paste("Propensity to gamble; n =",toString(sum(d5Behavioral$ntrials)),"possible trials;",toString(length(unique(d5Behavioral$uniqueid))),"participants"),xlab="Percentage of time gambled")
gamblePlot(d5,title="midGamblers",ylim=c(30,80),standardized = T,orig=F)
gamblePlot(d5,title="midGamblers",ylim=c(30,80),standardized = T,orig=T)
#How much did each participant choose to gamble
hist(d5Behavioral$percentageGambled,breaks=50,ylim=c(0,20),xlim=c(-5,100),main=paste("Propensity to gamble; n =",toString(sum(d5Behavioral$ntrials)),"possible trials;",toString(length(unique(d5Behavioral$uniqueid))),"participants"),xlab="Percentage of time gambled")
gamblePlot(d5,title="respGamblers",ylim=c(30,80),standardized = T,orig=F)
gamblePlot(d5,title="respGamblers",ylim=c(30,80),standardized = T,orig=T)
gambleRtPlot(dmid,xlimit=c(0,5),ylimit=c(800,1200))
totalRTPlot(dmid,title='midGamblers')
totalRTPlot(dmid,title='respGamblers')
switchPlot(d5,ylimit=c(100,200))
subj<-unique(d$uniqueid)
intN<-NULL
botN<-NULL
rtn<-NULL
oddsN<-NULL
oddsNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(oddsNtemp)[1]<-"OddsGamblingScore"
colnames(oddsNtemp)[2]<-"Participant"
magN<-NULL
magNtemp<-data.frame(matrix(NA, ncol = 2, nrow =1))
colnames(magNtemp)[1]<-"MagGamblingScore"
colnames(magNtemp)[2]<-"Participant"
rtSlopes<-NULL
gambleSlopes<-NULL
run<-NULL
slopeDF<-NULL
EVdiffs<-NULL
plotRT=F
plotGD=T
#Participants is default (all participants)
#If you want to run sub groups, go to bottom of script
for(i in subj){
print(i)
dsub<-d[d$uniqueid==i,]
dsubgamble<-filter(dsub,gambleDelay!=0,Trialid!=75|86)
dsubgambled<-filter(dsub,gambleDelay!=0,Trialid!=75|86,gambleRT!=0)
dsubhigh<-filter(dsub,Trialid==31|Trialid==32|Trialid==33|Trialid==34|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==21|Trialid==22|Trialid==23|Trialid==24|Trialid==25|Trialid==26)
#Breaking down by subFilter
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
oddsNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
oddsNtemp[1,2]=as.character(i)
oddsN=rbind(oddsN,oddsNtemp)
dsubhigh<-filter(dsub,Trialid==5|Trialid==6|Trialid==25|Trialid==26|Trialid==35|Trialid==36)
dsublow<-filter(dsub,Trialid==1|Trialid==2|Trialid==21|Trialid==22|Trialid==31|Trialid==32)
d4behavioralHigh<-dsubhigh %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4behavioralLow<-dsublow %>%
group_by(uniqueid) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
magNtemp[1,1]=as.integer(d4behavioralHigh$gambleCount-d4behavioralLow$gambleCount)
magNtemp[1,2]=as.character(i)
magN=rbind(magNtemp,magN)
#Breaking down subdf by gambleDelay
d4<-dsub[dsub$gambleDelay!=0,] %>%
group_by(binsTime) %>%
summarise(trials=length(trialNumber),
gambleCount=sum(response=="gamble"),
didNotGamble=sum(response=="fail"|response=="success"),
percentageGambled=round(gambleCount/trials*100))
d4$seconds<-d4$binsTime
if (plotGD){
gamblePlot(dsub,line=T,title=paste("id#",toString(unique(dsub$uniqueid))," oddsScore: ",toString(oddsNtemp[1,1])))
# plot(d4$seconds,d4$percentageGambled,xlim = c(0,7),ylim = c(0,100),
#      main=paste("Individual participant data; n =",toString(sum(d4$trials)),"trials;","participant:",toString(unique(dsub$uniqueid))),
#      xlab="Seconds into trial",ylab="Percentage Gambled",pch=19)
}
if (plotRT){
totalRTPlot(dsub,line=T,title=paste("Indiv graph; Participant# ",toString(unique(dsub$uniqueid))))
}
#This is to check for gamble ramp
mlogtemp<-glm(gambled~gambleDelay,data=filter(dsub,gambleDelay!=0,Trialid!=75|86),family="binomial")
#This is glm for RT by gamble Delay
mtempRT<-lm(dsubgambled$gambleRT~dsubgambled$gambleDelay)
#This checks to see if any participant is gamble ramping
if(summary(mlogtemp)$coefficients[8]<.1 & summary(mlogtemp)$coefficients[2]>0){
intN<-c(intN,i)
}
#Check to see if any participant has a RT that's suspiciously low..
if(mean(setdiff(dsub$outcomeRT,0),na.rm=TRUE)<200){
botN<-c(botN,i)
}
#Check to see if participant has a downwards decreasing RT ramp
if(summary(mtempRT)$coefficients[8]<.1 & summary(mtempRT)$coefficients[2]<0){
rtn<-c(rtn,i)
}
#Making df of gambleSlopes, rtSlopes, and i (who was just analyzed)
rtSlopes<-c(rtSlopes,summary(mtempRT)$coefficients[2])
gambleSlopes<-c(gambleSlopes,summary(mlogtemp)$coefficients[2])
EVdiffs<-c(EVdiffs,oddsScoreMean(dsub,int='early')-oddsScoreMean(dsub,int='late'))
run<-c(run,i)
}
IntN
intN
